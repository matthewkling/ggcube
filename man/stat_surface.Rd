% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stat-surface.R
\name{stat_surface}
\alias{stat_surface}
\title{3D surface from regular grid data}
\usage{
stat_surface(
  mapping = NULL,
  data = NULL,
  geom = GeomPolygon3D,
  position = "identity",
  light = lighting(),
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  ...
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[=aes]{aes()}}.}

\item{data}{The data to be displayed in this layer.}

\item{geom}{The geometric object to use display the data. Defaults to
\link{GeomPolygon3D} for proper 3D depth sorting.}

\item{position}{Position adjustment, defaults to "identity".}

\item{light}{A lighting specification object created by \code{lighting()}}

\item{na.rm}{If \code{FALSE}, missing values are removed with a warning.}

\item{show.legend}{Logical indicating whether this layer should be included in legends.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics.}

\item{...}{Other arguments passed on to \code{\link[=layer]{layer()}}.}
}
\description{
Creates 3D surfaces from regularly gridded data (like elevation maps).
Assumes data is on a regular x,y grid and creates quadrilateral faces.
}
\section{Aesthetics}{

\code{stat_surface()} requires the following aesthetics:
\itemize{
\item \strong{x}: X coordinate
\item \strong{y}: Y coordinate
\item \strong{z}: Z coordinate (elevation/height)
}
}

\section{Computed variables}{

\itemize{
\item \code{light}: Computed lighting value (numeric for most methods, hex color for \code{normal_rgb})
\item \code{normal_x}, \code{normal_y}, \code{normal_z}: Surface normal components
\item \code{slope}: Gradient magnitude from original surface calculations
\item \code{aspect}: Direction of steepest slope from original surface calculations
\item \code{dzdx}, \code{dzdy}: Partial derivatives from original surface calculations
}
}

\examples{
# Generate and visualize a basic surface
d <- dplyr::mutate(tidyr::expand_grid(x = -20:20, y = -20:20),
      z = sqrt(x^2 + y^2) / 1.5,
      z = cos(z) - z)

p <- ggplot(d, aes(x, y, z)) + coord_3d()

# basic surface
p + stat_surface(fill = "dodgerblue", color = "darkblue", linewidth = .2)

# with 3d lighting
p + stat_surface(fill = "darkgreen", color = "darkgreen", linewidth = .2,
      light = lighting(blend = "both"))

# mesh wireframe, without fill, with aes line color
p + stat_surface(aes(color = z), fill = NA) +
  scale_color_viridis_c()

ggplot(mountain, aes(x, y, z, fill = z, color = z)) +
  stat_surface(light = lighting(method = "diffuse", direction = c(1, 0, .5),
                           blend = "both", blend_mode = "hsv", blend_strength = .9),
               linewidth = .2) +
  coord_3d(roll = 125, pitch = 0, yaw = 150,
           ratio = c(1, 1.5, .5)) +
  theme_light() +
  scale_fill_gradientn(colors = c("darkgreen", "rosybrown4", "gray60")) +
  scale_color_gradientn(colors = c("darkgreen", "rosybrown4", "gray60"))

}
