% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stat-terrain.R
\name{stat_terrain}
\alias{stat_terrain}
\title{3D terrain surface from regular grid data}
\usage{
stat_terrain(
  mapping = NULL,
  data = NULL,
  geom = GeomPolygon3D,
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  lighting = lighting("lambert"),
  ...
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[=aes]{aes()}}.}

\item{data}{The data to be displayed in this layer.}

\item{geom}{The geometric object to use display the data. Defaults to
\link{GeomPolygon3D} for proper 3D depth sorting.}

\item{position}{Position adjustment, defaults to "identity".}

\item{na.rm}{If \code{FALSE}, missing values are removed with a warning.}

\item{show.legend}{Logical indicating whether this layer should be included in legends.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics.}

\item{lighting}{A lighting specification object created by \code{lighting()}}

\item{...}{Other arguments passed on to \code{\link[=layer]{layer()}}.}
}
\description{
Creates 3D surfaces from regularly gridded data (like elevation maps).
Assumes data is on a regular x,y grid and creates quadrilateral faces.
}
\section{Aesthetics}{

\code{stat_terrain()} requires the following aesthetics:
\itemize{
\item \strong{x}: X coordinate
\item \strong{y}: Y coordinate
\item \strong{z}: Z coordinate (elevation/height)
}
}

\section{Computed variables}{

\itemize{
\item \code{light}: Computed lighting value (numeric for most methods, hex color for \code{normal_rgb})
\item \code{normal_x}, \code{normal_y}, \code{normal_z}: Surface normal components
\item \code{slope}: Gradient magnitude from original terrain calculations
\item \code{aspect}: Direction of steepest slope from original terrain calculations
\item \code{dzdx}, \code{dzdy}: Partial derivatives from original terrain calculations
\item \code{face_id}: Quad group identifier
}
}

\examples{
# Using the built-in volcano dataset
volcano_df <- expand.grid(x = 1:nrow(volcano), y = 1:ncol(volcano))
volcano_df$z <- as.vector(volcano)

# Basic terrain surface
ggplot(volcano_df, aes(x, y, z = z)) +
  stat_terrain(aes(fill = after_stat(elevation))) +
  scale_fill_viridis_c() +
  coord_3d()

}
