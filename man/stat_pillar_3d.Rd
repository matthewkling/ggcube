% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stat-pillar-3d.R
\name{stat_pillar_3d}
\alias{stat_pillar_3d}
\title{3D pillar visualization from grid data}
\usage{
stat_pillar_3d(
  mapping = NULL,
  data = NULL,
  geom = GeomPolygon3D,
  position = "identity",
  width = 1,
  faces = "all",
  light = lighting(),
  zmin = NULL,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  ...
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[=aes]{aes()}}.}

\item{data}{The data to be displayed in this layer.}

\item{geom}{The geometric object to use display the data. Defaults to
\link{GeomPolygon3D} for proper 3D depth sorting.}

\item{position}{Position adjustment, defaults to "identity".}

\item{width}{Numeric value controlling pillar width as a fraction of grid spacing.
Default is 1.0 (pillars touch each other). Use 0.8 for small gaps, 1.2 for overlap.
Grid spacing is determined automatically using \code{\link[=resolution]{resolution()}}.}

\item{faces}{Character vector specifying which faces to render. Options:
\itemize{
\item \code{"all"} (default): Render all 6 faces
\item \code{"none"}: Render no faces
\item Vector of face names: \code{c("zmax", "xmin", "ymax")}, etc.
}
Valid face names: "xmin", "xmax", "ymin", "ymax", "zmin", "zmax".}

\item{light}{A lighting specification object created by \code{lighting()}}

\item{zmin}{Base level for all pillars. When provided as a parameter, overrides any
\code{zmin} aesthetic mapping. If \code{NULL} (default), uses the \code{zmin} aesthetic
if mapped, otherwise defaults to the minimum \code{z} value in the data.}

\item{na.rm}{If \code{FALSE}, missing values are removed with a warning.}

\item{show.legend}{Logical indicating whether this layer should be included in legends.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics.}

\item{...}{Other arguments passed on to \code{layer()}, such as \code{sort_method} and \code{scale_depth}
arguments to \code{geom_polygon_3d()}.}
}
\description{
Creates 3D pillar visualizations from grid data (regular or sparse).
Each data point becomes a rectangular 3D column extending from a base level
to the data value. Perfect for 3D bar charts, architectural visualization, and terrain layers.
Works with both complete regular grids and sparse point data.
}
\section{Aesthetics}{

\code{stat_pillar_3d()} requires the following aesthetics:
\itemize{
\item \strong{x}: X coordinate (grid position)
\item \strong{y}: Y coordinate (grid position)
\item \strong{z}: Z coordinate (pillar top height)
}

And optionally understands:
\itemize{
\item \strong{zmin}: Base level for each pillar (can be overridden by the \code{zmin} parameter)
}
}

\section{Computed variables}{

\itemize{
\item \code{light}: Computed lighting value (numeric for most methods, hex color for \code{normal_rgb})
\item \code{normal_x}, \code{normal_y}, \code{normal_z}: Face normal components
\item \code{group}: Hierarchical group identifier with format "pillarX__face_type" for proper depth sorting
\item \code{pillar_id}: Sequential pillar number
\item \code{face_type}: Face name ("zmax", "xmin", etc.)
}
}

\examples{
# Basic 3D bar chart from regular grid
d <- expand.grid(x = 1:5, y = 1:5)
d$z <- d$x + d$y + rnorm(25, 0, 0.5)

ggplot(d, aes(x, y, z)) +
  stat_pillar_3d(aes(fill = after_stat(light))) +
  coord_3d()

# Sparse data (only some points)
sparse_data <- data.frame(
  x = c(1, 3, 2, 4, 1),
  y = c(1, 2, 3, 1, 4),
  z = c(2, 5, 3, 4, 6)
)
ggplot(sparse_data, aes(x, y, z)) +
  stat_pillar_3d(aes(fill = z), color = "white") +
  coord_3d()

# Set base level for all pillars using parameter
ggplot(sparse_data, aes(x, y, z)) +
  stat_pillar_3d(aes(fill = z), color = "white",
                zmin = 0) +
  coord_3d()

# Variable base levels using aesthetic
d$base_level <- runif(nrow(d), -1, 1)
ggplot(d, aes(x, y, z = z, zmin = base_level)) +
  stat_pillar_3d(aes(fill = after_stat(light))) +
  coord_3d()

# Show only top and front faces
ggplot(sparse_data, aes(x, y, z)) +
  stat_pillar_3d(aes(fill = after_stat(light)),
              faces = c("zmax", "ymin")) +
  coord_3d()

# With gaps between pillars
ggplot(d, aes(x, y, z)) +
  stat_pillar_3d(color = "black", width = 0.6) +
  coord_3d()

}
\seealso{
\code{\link[=stat_surface_3d]{stat_surface_3d()}} for smooth surface rendering, \code{\link[=coord_3d]{coord_3d()}} for 3D coordinate systems,
\code{\link[=lighting]{lighting()}} for lighting specifications, \link{GeomPolygon3D} for the default geometry.
}
