% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lighting.R
\name{lighting}
\alias{lighting}
\title{Create lighting specification for 3D surface rendering}
\usage{
lighting(
  method = "lambert",
  direction = c(1, 1, 1),
  levels = 3,
  clamp_negative = TRUE
)
}
\arguments{
\item{method}{Character string specifying lighting model:
\itemize{
\item \code{"lambert"}: Standard diffuse lighting (surfaces facing away are dark)
\item \code{"signed"}: Continuous lighting gradient including negative values
\item \code{"ambient"}: Uniform lighting with no directional component
\item \code{"quantize"}: Quantized lighting with discrete levels
\item \code{"normal_rgb"}: Map surface normals to RGB colors
\item \code{"normal_x"}, \code{"normal_y"}, \code{"normal_z"}: Individual normal components
}}

\item{direction}{Numeric vector of length 3 specifying light direction in 3D space.
For most lighting methods, this defines the illumination direction.
For \code{method = "normal_rgb"}, this defines the orientation of the RGB
coordinate system (surfaces facing this direction will be brightest).
Default is \code{c(1, 1, 1)} (diagonal lighting from upper-right-front).}

\item{levels}{Integer number of discrete levels for \code{method = "quantize"}.
Default is 3.}

\item{clamp_negative}{Logical indicating whether to clamp negative lighting values
to the lowest level when using \code{method = "quantize"}. If \code{TRUE},
surfaces facing away from light get the darkest level. If \code{FALSE},
the full range from -1 to 1 is quantized. Default is \code{TRUE}.}
}
\value{
A \code{lighting} object that can be passed to 3D surface stats.
}
\description{
Creates a lighting specification object that encapsulates lighting parameters
for use with 3D surface stats like \code{stat_surface()} and \code{stat_terrain()}.
This provides a clean, reusable way to specify complex lighting configurations.
}
\examples{
library(ggplot2)
data(mountain)

# Basic Lambert lighting (classic hillshading)
ggplot(mountain, aes(x, y, z = z)) +
  stat_terrain(aes(fill = after_stat(light)),
               lighting = lighting("lambert")) +
  scale_fill_gradient(low = "black", high = "white") +
  coord_3d()

# Quantized lighting (cel shading effect)
ggplot(mountain, aes(x, y, z = z)) +
  stat_terrain(aes(fill = after_stat(light)),
               lighting = lighting("quantize", levels = 5)) +
  scale_fill_gradient(low = "darkgreen", high = "white") +
  coord_3d()

# Normal-to-RGB coloring with custom light orientation
ggplot(mountain, aes(x, y, z = z)) +
  stat_terrain(aes(fill = after_stat(light)),
               lighting = lighting("normal_rgb", direction = c(-1, 1, 1))) +
  coord_3d()

# Custom light direction for dramatic shadows
ggplot(mountain, aes(x, y, z = z)) +
  stat_surface(aes(fill = after_stat(light)),
               lighting = lighting("lambert", direction = c(1, 0, 0.5))) +
  scale_fill_gradient2(low = "navy", mid = "grey", high = "white") +
  coord_3d()

}
\seealso{
\code{\link{stat_surface}}, \code{\link{stat_terrain}} for using lighting specifications
}
