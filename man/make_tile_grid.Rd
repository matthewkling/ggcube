% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/grid-gen.R
\name{make_tile_grid}
\alias{make_tile_grid}
\title{Generate regular grids}
\usage{
make_tile_grid(
  grid = c("rect", "tri", "hex"),
  n = 40,
  direction = c("x", "y"),
  xlim,
  ylim
)
}
\arguments{
\item{grid}{Character argument specifying geometry of grid to generate.
Options include \code{"rect"} for rectangular grid (the default), \code{"tri"} for
triangular grid, or \code{"hex"} for hexagonal grid.}

\item{n}{Either a single integer specifying grid resolution in both dimensions,
or a vector of length 2 specifying \code{c(nx, ny)} for different resolutions.
Default is 40. Higher values create smoother surfaces but slower rendering.}

\item{direction}{Either \code{"x"} (the default) or \code{"y"}, specifying the orientation
of tile rows. Ignored for rectangular grids.}

\item{xlim, ylim}{Length-two numeric vectors bounding box over which to
generate the grid.}
}
\value{
A data frame with the following columns: \code{x}, \code{y}, \code{group} (integer denoting)
unique polygon id, and \code{order} (integer giving vertex order, for plotting).
}
\description{
Creates a rectangular, hexagonal, or triangular grid of specified proportions.
Returns tile vertex data formatted for \code{geom_poygon()}
}
\details{
Grids are constructed such that tiles are approximately equilateral
when scaled to a square domain, unless \code{n} gives separate resolution values
for the two dimensions. For triangular and hexagonal grids, this means that
\code{n} is only approximate.
}
