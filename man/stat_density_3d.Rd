% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stat-density-3d.R
\name{stat_density_3d}
\alias{stat_density_3d}
\title{3D kernel density estimation surface}
\usage{
stat_density_3d(
  mapping = NULL,
  data = NULL,
  geom = GeomPolygon3D,
  position = "identity",
  n = 30,
  h = NULL,
  adjust = 1,
  pad = 0.1,
  min_ndensity = 0,
  light = lighting(),
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  ...
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[=aes]{aes()}}. This stat
requires \code{x} and \code{y} aesthetics. By default, \code{fill} is mapped to
\code{after_stat(density)} and \code{z} is mapped to \code{after_stat(density)}.}

\item{data}{The data to be displayed in this layer. Must contain x and y columns
with point coordinates.}

\item{geom}{The geometric object to use display the data. Defaults to
\link{GeomPolygon3D} for proper 3D depth sorting.}

\item{position}{Position adjustment, defaults to "identity".}

\item{n}{Either a single integer specifying grid resolution in both dimensions,
or a vector of length 2 specifying \code{c(nx, ny)} for different resolutions.
Default is 30 (lower than ggplot2's default for better performance with 3D rendering).}

\item{h}{Bandwidth vector. If \code{NULL} (default), uses automatic bandwidth selection
via \code{MASS::bandwidth.nrd()}. Can be a single number (used for both dimensions)
or a vector of length 2 for different bandwidths in x and y directions.}

\item{adjust}{Multiplicative bandwidth adjustment factor. Values greater than 1
produce smoother surfaces; values less than 1 produce more detailed surfaces.
Default is 1.}

\item{pad}{Proportional range expansion factor. The computed density grid extends
this proportion of the raw data range beyond each data limit. Default is 0.1.}

\item{min_ndensity}{Lower cutoff for normalized density (computed variable \code{ndensity}
described below), below which to filter out results. This is particularly useful for
removing low-density corners of rectangular density grids when density surfaces are
shown for multiple groups, as in the example below. Default is 0 (no filtering).}

\item{light}{A lighting specification object created by \code{\link[=lighting]{lighting()}}}

\item{na.rm}{If \code{TRUE}, removes missing values before computing density.
If \code{FALSE}, missing values will cause an error. Default is \code{FALSE}.}

\item{show.legend}{Logical indicating whether this layer should be included in legends.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics.}

\item{...}{Other arguments passed on to \code{\link[=layer]{layer()}}, such as \code{colour}, \code{fill},
\code{alpha}, etc.}
}
\description{
Creates 3D surfaces from 2D point data using kernel density estimation.
The density values become the z-coordinates of the surface, allowing
visualization of data concentration as peaks and valleys in 3D space.
}
\section{Aesthetics}{

\code{stat_density_3d()} requires the following aesthetics from input data:
\itemize{
\item \strong{x}: X coordinate of data points
\item \strong{y}: Y coordinate of data points
}

And optionally understands:
\itemize{
\item \strong{group}: Grouping variable for computing separate density surfaces
\item Additional aesthetics are passed through for surface styling
}
}

\section{Computed variables}{

\itemize{
\item \code{x}, \code{y}: Grid coordinates for the density surface
\item \code{z}: Same as \code{density} (for 3D surface height)
\item \code{density}: The kernel density estimate at each grid point
\item \code{ndensity}: Density estimate scaled to maximum of 1 within each group
\item \code{count}: Density estimate Ã— number of observations in group (expected count)
\item \code{n}: Number of observations in each group
\item \code{light}: Computed lighting value (numeric for most methods, hex color for \code{normal_rgb})
\item \code{normal_x}, \code{normal_y}, \code{normal_z}: Surface normal components
\item \code{slope}: Gradient magnitude from surface calculations
\item \code{aspect}: Direction of steepest slope from surface calculations
\item \code{dzdx}, \code{dzdy}: Partial derivatives from surface calculations
}
}

\section{Grouping}{

When aesthetics like \code{colour} or \code{fill} are mapped to categorical variables,
\code{stat_density_3d()} computes separate density surfaces for each group, just
like \code{stat_density_2d()}. Each group gets its own density calculation with
proper \code{count} and \code{n} values.
}

\examples{
library(ggplot2)

# Basic density surface from scattered points
p <- ggplot(faithful, aes(eruptions, waiting)) +
  coord_3d() +
  scale_fill_viridis_c()
p + stat_density_3d()

# Color by alternative density values
p + stat_density_3d(aes(fill = after_stat(count)))

# Adjust bandwidth for smoother or more detailed surfaces
p + stat_density_3d(adjust = 0.5, color = "white")  # More detail
p + stat_density_3d(adjust = 2, color = "white")   # Smoother

# With lighting effects
p + stat_density_3d(light = lighting(blend = "fill", blend_mode = "hsl"))

# Higher resolution grid for smoother surfaces
p + stat_density_3d(n = 50, color = "black", fill = "darkgreen", alpha = 0.8,
                  light = lighting(direction = c(1, 1, 0.5), blend = "fill"))

# Project density surface onto cube face
ggplot(faithful, aes(eruptions, waiting)) +
  geom_point() +
  stat_density_3d(position = position_on_face("zmin"),
                  alpha = 0.4, fill = "orange") +
  coord_3d()

# Multiple density surfaces by group,
# using normalized density to equalize peak heights
ggplot(iris, aes(Petal.Length, Sepal.Length, fill = Species)) +
  stat_density_3d(aes(z = after_stat(ndensity)),
                  color = "black", alpha = .7) +
  coord_3d()

# Same, but with extra padding and with
# density filtering to remove rectangular artifacts
ggplot(iris, aes(Petal.Length, Sepal.Length, fill = Species)) +
  stat_density_3d(aes(z = after_stat(ndensity)),
                  pad = .25, min_ndensity = .001,
                  color = "black", alpha = .7) +
  coord_3d(ratio = c(3, 3, 1))

}
\seealso{
\code{\link[=stat_density_2d]{stat_density_2d()}} for 2D density contours, \code{\link[=stat_surface]{stat_surface()}} for
surfaces from existing grid data, \code{\link[=lighting]{lighting()}} for lighting specifications,
\code{\link[=coord_3d]{coord_3d()}} for 3D coordinate systems.
}
