% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stat-surface-3d.R
\name{stat_surface_3d}
\alias{stat_surface_3d}
\title{3D surface from regular grid data}
\usage{
stat_surface_3d(
  mapping = NULL,
  data = NULL,
  geom = GeomPolygon3D,
  position = "identity",
  light = lighting(),
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  ...
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[=aes]{aes()}}.}

\item{data}{The data to be displayed in this layer.}

\item{geom}{The geometric object to use display the data. Defaults to
\link{GeomPolygon3D} for proper 3D depth sorting.}

\item{position}{Position adjustment, defaults to "identity".}

\item{light}{A lighting specification object created by \code{lighting()}}

\item{na.rm}{If \code{FALSE}, missing values are removed with a warning.}

\item{show.legend}{Logical indicating whether this layer should be included in legends.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics.}

\item{...}{Other arguments passed on to \code{\link[=layer]{layer()}}.}
}
\description{
Creates 3D surfaces from regularly gridded data (like elevation maps).
Assumes data is on a regular x,y grid and creates quadrilateral faces.
}
\section{Aesthetics}{

\code{stat_surface_3d()} requires the following aesthetics:
\itemize{
\item \strong{x}: X coordinate
\item \strong{y}: Y coordinate
\item \strong{z}: Z coordinate (elevation/height)
}
}

\section{Computed variables}{

\itemize{
\item \code{light}: Computed lighting value (numeric for most methods, hex color for \code{normal_rgb})
\item \code{normal_x}, \code{normal_y}, \code{normal_z}: Surface normal components
\item \code{slope}: Gradient magnitude from original surface calculations
\item \code{aspect}: Direction of steepest slope from original surface calculations
\item \code{dzdx}, \code{dzdy}: Partial derivatives from original surface calculations
}
}

\examples{
# data for a basic surface
d <- dplyr::mutate(tidyr::expand_grid(x = -20:20, y = -20:20),
      z = sqrt(x^2 + y^2) / 1.5,
      z = cos(z) - z)

# base plot
p <- ggplot(d, aes(x, y, z)) + coord_3d()

# basic surface
p + stat_surface_3d(fill = "dodgerblue", color = "darkblue", linewidth = .2)

# surface with 3d lighting
p + stat_surface_3d(fill = "steelblue", color = "steelblue", linewidth = .2,
      light = lighting(mode = "hsl", direction = c(1, 0, 0),
                       fill = TRUE, color = TRUE))

# mesh wireframe, without fill, with aes line color
p + stat_surface_3d(aes(color = z), fill = NA)

# use `group` to plot data for multiple surfaces
d <- expand.grid(x = -5:5, y = -5:5)
d$z <- d$x^2 - d$y^2
d$g <- "a"
d2 <- d
d2$z <- d$z + 10
d2$g <- "b"
ggplot(rbind(d, d2),
       aes(x, y, z, group = g, fill = g)) +
  coord_3d() +
  stat_surface_3d(color = "black", alpha = .5)

# terrain surface with topographic hillshade and elevational fill
ggplot(mountain, aes(x, y, z, fill = z, color = z)) +
  stat_surface_3d(light = lighting(method = "diffuse", direction = c(1, 0, .5),
                           fill = TRUE, color = TRUE, mode = "hsv", strength = .9),
               linewidth = .2) +
  coord_3d(ratio = c(1, 1.5, .5)) +
  theme_light() +
  scale_fill_gradientn(colors = c("darkgreen", "rosybrown4", "gray60")) +
  scale_color_gradientn(colors = c("darkgreen", "rosybrown4", "gray60")) +
  guides(fill = guide_colorbar_shaded())

}
\seealso{
\code{\link[=stat_function_3d]{stat_function_3d()}} for surfaces representing mathematical functions;
\code{\link[=stat_smooth_3d]{stat_smooth_3d()}} for surfaces based on fitted statistical models;
\code{\link[=stat_pillar_3d]{stat_pillar_3d()}} for terraced column-like surfaces;
\code{\link[=geom_polygon_3d]{geom_polygon_3d()}} for the default geom associated with \code{stat_surface_3d()}.
}
