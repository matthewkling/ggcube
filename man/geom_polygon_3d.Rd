% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom-polygon-3d.R
\name{geom_polygon_3d}
\alias{geom_polygon_3d}
\title{3D polygon geometry with depth sorting}
\usage{
geom_polygon_3d(
  mapping = NULL,
  data = NULL,
  stat = StatIdentity3D,
  sort_method = "auto",
  scale_depth = TRUE,
  position = "identity",
  ...,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[=aes]{aes()}}.}

\item{data}{The data to be displayed in this layer.}

\item{stat}{The statistical transformation to use on the data. Defaults to
\link{StatIdentity3D} for proper discrete scale handling and group preservation.}

\item{sort_method}{Character indicating algorithm used to determine the order in which
polygons are rendered.
\itemize{
\item \code{"painter"}: Polygons are sorted by the mean depth (distance from viewer after
rotation) of their vertices. This is fast, but can give incorrect results in certain cases.
\item \code{"pairwise"}: A more intensive sorting algorithm that compares every pair of
polygons in 3D to determine which face should be rendered behind the other;
slower but more accurate.
\item \code{"auto"}: The default. Uses pairwise if polygon data has less
than 500 rows and painter otherwise.
}}

\item{scale_depth}{Logical indicating whether polygon linewidths should be scaled to make closer lines
wider and farther lines narrower. Default is TRUE. Scaling is based on the mean depth of a polygon.}

\item{position}{Position adjustment, defaults to "identity".}

\item{...}{Other arguments passed on to \code{\link[=layer]{layer()}}.}

\item{na.rm}{If \code{FALSE}, missing values are removed with a warning.}

\item{show.legend}{Logical indicating whether this layer should be included in legends.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics.}
}
\description{
\code{geom_polygon_3d()} renders 3D polygons with proper depth sorting for realistic
3D surface visualization. It's designed to work with surface data
from \code{\link[=stat_hull_3d]{stat_hull_3d()}} and \code{\link[=stat_surface_3d]{stat_surface_3d()}}, as well as regular polygon data like maps.
}
\section{Aesthetics}{

\code{geom_polygon_3d()} requires:
\itemize{
\item \strong{x}: X coordinate
\item \strong{y}: Y coordinate
\item \strong{z}: Z coordinate (for depth sorting)
\item \strong{group}: Polygon grouping variable
}

And understands these additional aesthetics:
\itemize{
\item \code{fill}: Polygon fill color
\item \code{colour}: Border color
\item \code{linewidth}: Border line width
\item \code{linetype}: Border line type
\item \code{alpha}: Transparency
\item \code{order}: Vertex order within polygons (for proper polygon construction)
}
}

\examples{
# Typically used via stats like stat_surface_3d() or stat_hull_3d()
ggplot(sphere_points, aes(x, y, z)) +
  stat_hull_3d(method = "convex", fill = "dodgerblue",
            light = lighting(blend = "fill", blend_mode = "hsl")) +
  coord_3d()

# Can be used directly with properly structured data
triangles <- data.frame(x = rep(c(1, 2, 3), 3),
                            y = rep(c(1, 3, 1), 3),
                            z = rep(1:3, each = 3),
                            shape = rep(letters[1:3], each = 3))
ggplot(triangles, aes(x, y, z, fill = shape)) +
  geom_polygon_3d(color = "black") +
  coord_3d()

# Use `sort_method` to choose between depth sorting algorithms
d <- data.frame(group = rep(letters[1:3], each = 4),
                x = c(1, 1, 2, 2,   1, 1, 3, 3,   2, 2, 3, 3),
                y = rep(c(1, 2, 2, 1), 3),
                z = rep(c(1, 1.5, 2), each = 4))
p <- ggplot(d, aes(x, y, z, group = group, fill = group)) +
      coord_3d(pitch = 50, roll = 20, yaw = 0, scales = "fixed") +
      theme_light()
# fast, but rendering order is incorrect in this particular example
p + geom_polygon_3d(color = "black", linewidth = 1, alpha = .75,
      sort_method = "painter")
# correct rendering order (but slow for large data sets)
p + geom_polygon_3d(color = "black", linewidth = 1, alpha = .75,
      sort_method = "pairwise")

}
