[{"path":"https://matthewkling.github.io/ggcube/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthew Kling. Maintainer.","code":""},{"path":"https://matthewkling.github.io/ggcube/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kling M (2025). ggcube: 3D plotting ggplot2. R package version 0.1.0.9000, https://github.com/matthewkling/ggcube.","code":"@Manual{,   title = {ggcube: 3D plotting with ggplot2},   author = {Matthew Kling},   year = {2025},   note = {R package version 0.1.0.9000},   url = {https://github.com/matthewkling/ggcube}, }"},{"path":"https://matthewkling.github.io/ggcube/index.html","id":"ggcube","dir":"","previous_headings":"","what":"3D plotting with ggplot2","title":"3D plotting with ggplot2","text":"ggcube R package extends ggplot2 support 3D data visualization. Use create 3D scatter plots, surfaces, volumes, complex layered visualizations using familiar ggplot2 syntax aes(x, y, z) coord_3d(). package provides variety 3D-specific layer functions render surfaces, prisms, points, paths 3D. can control plot geometry 3D projection parameters, can apply range 3D lighting models, can mix 3D layers 2D layers rendered cube faces. ggcube aims seamless integration ggplot2. Standard ggplot2 features work expected, including faceting, themes, scales, legends, layering. addition 3D-specific functions, also works many existing ggplot2 stats geoms. WARNING: package development yet officially released. Bugs breaking changes unlikely.","code":""},{"path":"https://matthewkling.github.io/ggcube/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"3D plotting with ggplot2","text":"can install development version ggcube GitHub :","code":"devtools::install_github(\"matthewkling/ggcube\")"},{"path":"https://matthewkling.github.io/ggcube/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"3D plotting with ggplot2","text":"essential ingredient ggcube plot coord_3d(). Adding standard ggplot, providing z aesthetic variable, creates 3D plot:","code":"library(ggplot2) library(ggcube)  # Basic 3D scatter plot ggplot(mtcars, aes(x = mpg, y = wt, z = qsec,                     color = factor(cyl))) +       geom_point() +       coord_3d()"},{"path":"https://matthewkling.github.io/ggcube/index.html","id":"surfaces","dir":"","previous_headings":"","what":"Surfaces","title":"3D plotting with ggplot2","text":"stat_function() visualizes mathematical functions stat_surface_3d() renders surfaces based existing grid data terrain data stat_smooth_3d() fits statistical models two predictors, visualizes fitted predictions confidence intervals stat_density_3d() creates perspective visualizations 2D kernel density estimates stat_hull_3d() plots triangulated volumes based convex alpha hulls 3D point data Example: terrain surface using stat_function_3d():  Example: mathematical surface using stat_function_3d(): Example: fitted model surface using stat_smooth_3d():","code":"ggplot(mountain, aes(x, y, z)) +       stat_surface_3d(aes(fill = z, color = z),                       light = light(direction = c(1, 0, 0))) +       scale_fill_viridis_c() + scale_color_viridis_c() +       coord_3d(ratio = c(1.5, 2, 1), expand = FALSE, panels = \"zmin\") +       guides(fill = guide_colorbar_3d()) +       theme_light() ggplot() +       stat_function_3d(             fun = function(x, y) cos(x) * sin(y),             xlim = c(-pi, pi), ylim = c(-pi, pi),             color = \"black\", grid = \"hex\"       ) +       coord_3d(yaw = 150) +       theme_minimal() # Generate scattered 3D data set.seed(123) d <- data.frame(x = rnorm(50),                 y = rnorm(50)) d$z <- d$x + d$x^2 - d$y^2 + rnorm(50)  # Plot GAM fit with uncertainty layers ggplot(d, aes(x, y, z)) +        stat_smooth_3d(aes(fill = after_stat(level)),                      method = \"gam\", formula = z ~ te(x, y),                      se = TRUE, level = 0.99, color = \"black\") +       scale_fill_manual(values = c(\"red\", \"darkorchid4\", \"steelblue\")) +       coord_3d()"},{"path":"https://matthewkling.github.io/ggcube/index.html","id":"prisms","dir":"","previous_headings":"","what":"Prisms","title":"3D plotting with ggplot2","text":"stat_pillar_3d() produces 3D column charts stat_voxel_3d() renders sparse 3D pixel data arrays cubes stat_histogram_3d() (coming soon) stat_prism_3d() (coming soon) Example: 3D bar chart using stat_pillar_3d():","code":"# 3D pillar visualization set.seed(123) data <- expand.grid(x = 1:10, y = 1:10) data$z1 <- runif(nrow(data)) data$z2 <- runif(nrow(data)) ggplot(data, aes(x, y, z1, zmin = z2, fill = z2 - z1)) +       stat_pillar_3d(color = \"black\", linewidth = 0.1, width = .8,                      light = light(direction = c(1, .5, 0), color = FALSE),                      sort_method = \"pairwise\") +       coord_3d(pitch = 0, yaw = 0, roll = -50, dist = 1.5) +       scale_fill_gradient2() +        guides(fill = guide_colorbar_3d()) +       theme(panel.border = element_rect(color = \"black\", linewidth = .25))"},{"path":"https://matthewkling.github.io/ggcube/index.html","id":"paths","dir":"","previous_headings":"","what":"Paths","title":"3D plotting with ggplot2","text":"geom_path_3d() renders paths 3D space depth-based sorting scaling:","code":"butterfly <- lorenz_attractor(n_points = 8000, dt = .01) ggplot(butterfly, aes(x, y, z, color = time)) +       geom_path_3d(linewidth = 0.1, color = \"black\",                    position = position_on_face(c(\"xmax\", \"ymax\", \"zmin\"))) +       geom_path_3d(linewidth = 0.3) +       scale_color_gradientn(colors = c(\"blue\", \"purple\", \"red\", \"orange\")) +       coord_3d() +       theme_light()"},{"path":"https://matthewkling.github.io/ggcube/index.html","id":"points","dir":"","previous_headings":"","what":"Points","title":"3D plotting with ggplot2","text":"ggplot2::geom_point() works ggcube demonstrated , geom_point_3d() creates 3D-aware scatter plots proper point ordering, depth-scaled point sizes, options include reference lines reference points projecting 3D points onto 2D face panels:","code":"ggplot(mtcars, aes(mpg, wt, qsec, fill = factor(cyl))) +       geom_point_3d(size = 5, shape = 21, color = \"black\", stroke = .1,                     ref_lines = TRUE, ref_points = TRUE,                     ref_faces = c(\"zmin\", \"xmax\")) +       coord_3d()"},{"path":"https://matthewkling.github.io/ggcube/index.html","id":"lighting-effects","dir":"","previous_headings":"","what":"Lighting effects","title":"3D plotting with ggplot2","text":"Lighting 3D polygon layers controlled providing light() specification.","code":"ggplot(sphere_points, aes(x, y, z)) +       coord_3d(scales = \"fixed\") +       scale_fill_viridis_c() +       scale_color_viridis_c() +       theme_dark() +       theme(legend.position = \"none\") +              # add shading to solid color/fill       stat_hull_3d(fill = \"gray50\", color = \"gray50\",                    light = light(method = \"direct\", mode = \"hsl\",                                   direction = c(-1, 0, 0))) +              # add shading to aesthetic color/fill       stat_hull_3d(aes(x = x + 2.5, fill = z, color = z),                    light = light(method = \"diffuse\", mode = \"hsl\",                                   direction = c(1, 0, 0)))"},{"path":"https://matthewkling.github.io/ggcube/index.html","id":"face-projection","dir":"","previous_headings":"","what":"Face projection","title":"3D plotting with ggplot2","text":"3D 2D layers can mixed using position_on_face() project 2D data onto cube faces:","code":"ggplot(iris, aes(Sepal.Length, Sepal.Width, Petal.Length,                   color = Species, fill = Species)) +       coord_3d() + xlim(4, 8) +              # place 2D density plot on zmin face       stat_density_2d(position = position_on_face(faces = \"zmin\", axes = c(\"x\", \"y\")),             geom = \"polygon\", alpha = .1, linewidth = .25) +              # flatten 3D hull layer onto ymax face       stat_hull_3d(position = position_on_face(\"ymax\"), alpha = .5) +              # flatten 3D voxels onto xmax face to create 2D bins       stat_voxel_3d(aes(round(Sepal.Length), round(Sepal.Width), round(Petal.Length)),             position = position_on_face(\"xmax\"), alpha = .15, light = NULL) +              # 3D scatter plot       geom_point_3d( shape = 21, color = \"black\", stroke = .25)"},{"path":"https://matthewkling.github.io/ggcube/reference/aes.html","id":null,"dir":"Reference","previous_headings":"","what":"Aesthetic mapping with positional z support — aes","title":"Aesthetic mapping with positional z support — aes","text":"function extends ggplot2::aes() support positional mapping z aesthetic. maintains full backward compatibility original aes() function enabling convenient aes(x, y, z) syntax 3D plots.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/aes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aesthetic mapping with positional z support — aes","text":"","code":"aes(x, y, z, ...)"},{"path":"https://matthewkling.github.io/ggcube/reference/aes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aesthetic mapping with positional z support — aes","text":"x Variable map x aesthetic (required) y Variable map y aesthetic (required) z Variable map z aesthetic (optional) ... aesthetic mappings (color, size, etc.)","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/aes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aesthetic mapping with positional z support — aes","text":"aesthetic mapping object, ggplot2::aes()","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/aes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aesthetic mapping with positional z support — aes","text":"function lightweight wrapper around ggplot2::aes() : Maintains full backward compatibility existing 2D plots Enables positional z mapping: aes(x_var, y_var, z_var) Works geom uses z aesthetic (contour, raster, 3D plots) Passes aesthetics unchanged","code":""},{"path":[]},{"path":"https://matthewkling.github.io/ggcube/reference/aes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aesthetic mapping with positional z support — aes","text":"","code":"library(ggplot2)  # 2D plots work like regular ggplot2 ggplot(mtcars, aes(mpg, wt)) + geom_point()   # 3D plots can use positional syntax, or explicitly map to z # same as: ggplot(mtcars, aes(mpg, wt, z = qsec)) + geom_point() + coord_3d() ggplot(mtcars, aes(mpg, wt, qsec)) + geom_point() + coord_3d()   # Also works with non-ggcube z-aesthetic geoms ggplot(mountain, aes(x, y, z)) + geom_contour()"},{"path":"https://matthewkling.github.io/ggcube/reference/apply_perspective.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply perspective effect to 3D points — apply_perspective","title":"Apply perspective effect to 3D points — apply_perspective","text":"Apply perspective effect 3D points","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/apply_perspective.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply perspective effect to 3D points — apply_perspective","text":"","code":"apply_perspective(rotated, dist)"},{"path":"https://matthewkling.github.io/ggcube/reference/apply_perspective.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply perspective effect to 3D points — apply_perspective","text":"rotated Matrix rotated x, y, z coordinates dist Distance viewer center scene","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/apply_perspective.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply perspective effect to 3D points — apply_perspective","text":"Matrix perspective effect applied","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/apply_surface_light.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply lighting models to surface normals — apply_surface_light","title":"Apply lighting models to surface normals — apply_surface_light","text":"Apply lighting models surface normals","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/apply_surface_light.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply lighting models to surface normals — apply_surface_light","text":"","code":"apply_surface_light(face_data, normals, face_centers, light)"},{"path":"https://matthewkling.github.io/ggcube/reference/apply_surface_light.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply lighting models to surface normals — apply_surface_light","text":"face_data Data frame unique faces (group column) normals Matrix surface normals face_centers Matrix face centers light Lighting specification object","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/apply_surface_light.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply lighting models to surface normals — apply_surface_light","text":"Data frame lighting values normal components","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/calculate_face_centers.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate face centers for positional lighting — calculate_face_centers","title":"Calculate face centers for positional lighting — calculate_face_centers","text":"Calculate face centers positional lighting","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/calculate_face_centers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate face centers for positional lighting — calculate_face_centers","text":"","code":"calculate_face_centers(faces)"},{"path":"https://matthewkling.github.io/ggcube/reference/calculate_face_centers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate face centers for positional lighting — calculate_face_centers","text":"faces Data frame face vertices","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/calculate_face_centers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate face centers for positional lighting — calculate_face_centers","text":"Matrix face centers (one row per face, 3 columns)","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/calculate_positional_light_directions.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate per-face light directions for positional lighting — calculate_positional_light_directions","title":"Calculate per-face light directions for positional lighting — calculate_positional_light_directions","text":"Calculate per-face light directions positional lighting","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/calculate_positional_light_directions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate per-face light directions for positional lighting — calculate_positional_light_directions","text":"","code":"calculate_positional_light_directions(face_centers, light_position)"},{"path":"https://matthewkling.github.io/ggcube/reference/calculate_positional_light_directions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate per-face light directions for positional lighting — calculate_positional_light_directions","text":"face_centers Matrix 3 columns (x, y, z face center coordinates) light_position Numeric vector length 3 (x, y, z light position)","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/calculate_positional_light_directions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate per-face light directions for positional lighting — calculate_positional_light_directions","text":"Matrix 3 columns (normalized light direction vectors)","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/compute_axis_aligned_normals.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute normals for axis-aligned faces (voxels/pillars) — compute_axis_aligned_normals","title":"Compute normals for axis-aligned faces (voxels/pillars) — compute_axis_aligned_normals","text":"Compute normals axis-aligned faces (voxels/pillars)","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/compute_axis_aligned_normals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute normals for axis-aligned faces (voxels/pillars) — compute_axis_aligned_normals","text":"","code":"compute_axis_aligned_normals(face_data)"},{"path":"https://matthewkling.github.io/ggcube/reference/compute_axis_aligned_normals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute normals for axis-aligned faces (voxels/pillars) — compute_axis_aligned_normals","text":"face_data Data frame unique faces containing face_type column","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/compute_axis_aligned_normals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute normals for axis-aligned faces (voxels/pillars) — compute_axis_aligned_normals","text":"Matrix normalized normal vectors (one row per face, 3 columns)","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/compute_light.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply lighting models to surface normals with positional light support — compute_light","title":"Apply lighting models to surface normals with positional light support — compute_light","text":"Computes lighting values surface normals using various lighting models. Supports directional lighting (parallel rays) positional lighting (point light sources per-face light directions).","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/compute_light.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply lighting models to surface normals with positional light support — compute_light","text":"","code":"compute_light(normals, lighting, face_centers = NULL)"},{"path":"https://matthewkling.github.io/ggcube/reference/compute_light.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply lighting models to surface normals with positional light support — compute_light","text":"normals Matrix 3 columns (x, y, z normal components), row represents face normal vector. unit vectors (normalized). face_centers Matrix 3 columns (x, y, z coordinates) representing center position face data coordinate space. Required positional lighting, optional directional lighting. light lighting specification object created light()","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/compute_light.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply lighting models to surface normals with positional light support — compute_light","text":"Vector lighting values. methods, returns numeric values. method = \"normal_rgb\", returns hex color strings () class identity scaling.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/compute_light_dot_products.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute dot products between normals and light direction — compute_light_dot_products","title":"Compute dot products between normals and light direction — compute_light_dot_products","text":"Compute dot products normals light direction","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/compute_light_dot_products.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute dot products between normals and light direction — compute_light_dot_products","text":"","code":"compute_light_dot_products(normals, light_dir_norm)"},{"path":"https://matthewkling.github.io/ggcube/reference/compute_light_dot_products.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute dot products between normals and light direction — compute_light_dot_products","text":"normals Matrix 3 columns (x, y, z normal components) light_dir_norm Normalized light direction vector","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/compute_light_dot_products.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute dot products between normals and light direction — compute_light_dot_products","text":"Vector dot products","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/compute_light_in_coord.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute lighting from standardized coordinates in coord_3d — compute_light_in_coord","title":"Compute lighting from standardized coordinates in coord_3d — compute_light_in_coord","text":"Compute lighting standardized coordinates coord_3d","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/compute_light_in_coord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute lighting from standardized coordinates in coord_3d — compute_light_in_coord","text":"","code":"compute_light_in_coord(data, standardized_coords, scale_ranges, scales, ratio)"},{"path":"https://matthewkling.github.io/ggcube/reference/compute_light_in_coord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute lighting from standardized coordinates in coord_3d — compute_light_in_coord","text":"data Original data frame lighting_spec column standardized_coords Data frame standardized x, y, z coordinates","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/compute_light_in_coord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute lighting from standardized coordinates in coord_3d — compute_light_in_coord","text":"data frame lighting values normal components added","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/compute_normal_rgb_light.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute normal-to-RGB mapping with light direction rotation — compute_normal_rgb_light","title":"Compute normal-to-RGB mapping with light direction rotation — compute_normal_rgb_light","text":"Maps surface normals RGB colors rotation normals aligned light_dir map white/bright colors.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/compute_normal_rgb_light.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute normal-to-RGB mapping with light direction rotation — compute_normal_rgb_light","text":"","code":"compute_normal_rgb_light(normals, light_dir_norm)"},{"path":"https://matthewkling.github.io/ggcube/reference/compute_normal_rgb_light.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute normal-to-RGB mapping with light direction rotation — compute_normal_rgb_light","text":"normals Matrix 3 columns (x, y, z normal components) light_dir_norm Normalized light direction vector","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/compute_normal_rgb_light.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute normal-to-RGB mapping with light direction rotation — compute_normal_rgb_light","text":"Character vector hex color codes","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/compute_surface_normals.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute surface normals from face gradients — compute_surface_normals","title":"Compute surface normals from face gradients — compute_surface_normals","text":"Compute surface normals face gradients","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/compute_surface_normals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute surface normals from face gradients — compute_surface_normals","text":"","code":"compute_surface_normals(face_data)"},{"path":"https://matthewkling.github.io/ggcube/reference/compute_surface_normals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute surface normals from face gradients — compute_surface_normals","text":"face_data Data frame unique faces containing dzdx dzdy","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/compute_surface_normals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute surface normals from face gradients — compute_surface_normals","text":"Matrix normalized normal vectors (one row per face, 3 columns)","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/compute_triangle_normals.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute triangle normals from vertex coordinates — compute_triangle_normals","title":"Compute triangle normals from vertex coordinates — compute_triangle_normals","text":"Compute triangle normals vertex coordinates","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/compute_triangle_normals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute triangle normals from vertex coordinates — compute_triangle_normals","text":"","code":"compute_triangle_normals(data, face_data)"},{"path":"https://matthewkling.github.io/ggcube/reference/compute_triangle_normals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute triangle normals from vertex coordinates — compute_triangle_normals","text":"data Face vertex data face_data Unique face data","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/compute_triangle_normals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute triangle normals from vertex coordinates — compute_triangle_normals","text":"Matrix normalized normal vectors (one row per face, 3 columns)","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/coord_3d.html","id":null,"dir":"Reference","previous_headings":"","what":"3D coordinate system — coord_3d","title":"3D coordinate system — coord_3d","text":"coord_3d 3D coordinate system creates 2D view 3D data. essential core component plot made ggcube. supports rotation, perspective projection, options controlling plot aspect ratios, panel selection, axis label placement.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/coord_3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3D coordinate system — coord_3d","text":"","code":"coord_3d(   pitch = 0,   roll = -60,   yaw = -30,   persp = TRUE,   dist = 2,   expand = TRUE,   clip = \"off\",   panels = \"background\",   xlabels = \"auto\",   ylabels = \"auto\",   zlabels = \"auto\",   rotate_labels = TRUE,   scales = \"free\",   ratio = c(1, 1, 1) )"},{"path":"https://matthewkling.github.io/ggcube/reference/coord_3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D coordinate system — coord_3d","text":"roll, pitch, yaw Rotation around x, y, z axes, respectively, degrees. Positive values rotate near face plot \"downward\", \"rightward\", clockwise, respectively. persp Logical indicating whether apply perspective projection. TRUE (default), objects farther viewer appear smaller. FALSE, produces orthographic projection lines parallel 3D space render parallel plot. dist Distance viewer center data cube. used persp = TRUE. Larger values create less perspective distortion. Default 2. Values less 1 allowed can problematic rendering. expand Logical indicating whether expand axis ranges beyond data range, similar standard ggplot2 behavior. TRUE (default), expansion behavior can controlled using standard axis scaling functions, e.g. ... + scale_x_continuous(expand = expansion(.5)). clip Character string indicating clipping behavior. Use \"\" (default, recommended 3D plots) allow drawing outside plot panel. panels Character vector specifying panels render, including one following: \"background\", \"foreground\": faces laying behind front cube's interior volume, respectively. panels vary depending plot rotation. \"xmin\", \"ymax\", etc.: names specific cube faces. \"\", \"none\": display full cube remove faces. default \"background\". Note panel styling handled via normal theme() approach; select panels sit front data, can control transparency element_rect(alpha = ...). xlabels, ylabels, zlabels Character strings length-2 character vectors specifying axis label (text title) placement. Labels placed inline grid lines selected panel face. axis, four potential panels labels placed, two potential edges panel. Labels can placed visible faces (see panels argument). parameter accepts: \"auto\" (default): Automatic edge selection based algorithm prioritizes edges visible periphery plot considers several attributes face geometry better readability. c(\"face1\", \"face2\"): Manual edge specification using two adjacent face names (e.g., c(\"xmin\", \"ymin\") selects edge shared xmin ymin faces). first face vector determines face axis labels aligned , second face identifies edge face gets labelled. Available face names : \"xmin\", \"xmax\", \"ymin\", \"ymax\", \"zmin\", \"zmax\". rotate_labels Logical indicating whether axis labels (text titles) automatically rotate align projected axis directions. FALSE, uses theme text title angle settings. scales Character string specifying aspect ratio behavior: \"free\" (default): axis scales independently fill cube space, ratio applies standardized coordinates. gives maximum visual range dimension. \"fixed\": Maintains proportional relationships raw data values, scaled ratio. Similar coord_fixed() 3D (visual ratios match labeled axis ranges). ratio Numeric vector length 3 specifying relative axis lengths c(x, y, z). Defaults c(1, 1, 1) equal proportions. scales = \"free\": Ratios apply scaled cube coordinates scales = \"fixed\": Ratios apply original data coordinates","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/coord_3d.html","id":"-d-theming","dir":"Reference","previous_headings":"","what":"3D Theming","title":"3D coordinate system — coord_3d","text":"3D plots support additional theme elements beyond standard ggplot2 themes: Text elements: axis.text.z: Styling z-axis tick labels (inherits axis.text) axis.title.z: Styling z-axis title (inherits axis.title) axis.text, axis.text: Standard styling element_text(). Note: use element_text(margin = margin(...)) adjust text padding, left/right margins affecting axis text top/bottom margins affecting axis titles; since placement justification elements varies dynamically, distinction made left right margins, top bottom margins – can set either, maximum two used. Panel elements: panel.foreground: Styling cube faces rendered front data (inherits panel.background) panel.border.foreground: Styling cube faces rendered front data (inherits panel.border) panel.grid.foreground: Styling grid lines foreground faces (inherits panel.grid) panel.grid.major.foreground: Major grid lines foreground faces (inherits panel.grid.foreground) Enhanced elements: element_rect() supports alpha parameter transparency effects, particularly useful panel.foreground panels parameter controls cube faces rendered, theme() controls visual styling. Background panels use standard panel.background, panel.border, panel.grid, etc., foreground panels use *.foreground variants listed . Since foreground elements inherit standard background grid elements, can use panel.background, etc. style background foreground faces simultaneously.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/coord_3d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"3D coordinate system — coord_3d","text":"","code":"p <- ggplot() +   stat_function_3d(     aes(fill = after_stat(z), color = after_stat(z)),     fun = function(x, y) sin(x) * cos(y),     xlim = c(-pi, pi), ylim = c(-pi, pi),     n = 50, light = light(contrast = 1.5)) +   scale_fill_viridis_c() + scale_color_viridis_c() +   theme(legend.position = \"none\")  # 3D plot with default coord settings p + coord_3d()   # Use `pitch`, `roll`, `yaw` to control plot rotation ----------------------  # zero rotation gives view from x-y face p + coord_3d(pitch = 0, roll = 0, yaw = 0)   # pitch rotates plot around y axis p + coord_3d(pitch = 30, roll = 0, yaw = 0)   # roll rotates plot around x axis p + coord_3d(pitch = 0, roll = 30, yaw = 0)   # yaw rotates plot around z axis p + coord_3d(pitch = 0, roll = 0, yaw = 30)   # combine them to achieve arbitrary rotations p + coord_3d(pitch = 20, roll = 40, yaw = 60)   # Use `persp` and `dist` to control perspective effects --------------------  # strong perspective effect as if seen from very close p + coord_3d(dist = 1)   # weaker perspective effects as if seen from far away p + coord_3d(dist = 3)   # orthographic projection, effectively dist = Inf p + coord_3d(persp = FALSE)   # Use `scales` and `ratio` to modify aspect ratio --------------------------  # Default \"free\" scales shown above give maximum visual range # Fixed scales (proportions match data scales, like coord_fixed) p + coord_3d(scales = \"fixed\")   # Custom aspect ratios: make y twice as long visually p + coord_3d(scales = \"free\", ratio = c(1, 2, 1))   # Custom aspect ratios: fix scales but make y twice long p + coord_3d(scales = \"fixed\", ratio = c(1, 2, 1))   # Use `panels` to select which cube faces to render ------------------------  p + coord_3d(panels = c(\"zmin\", \"xmax\"))   # and use `theme()` elements to control panel and text styling p + coord_3d(panels = \"all\") +     theme(panel.background = element_rect(color = \"black\"),           panel.border = element_rect(color = \"black\"),           panel.foreground = element_rect(alpha = .3),           panel.grid.foreground = element_line(color = \"gray\", linewidth = .25),           axis.text = element_text(color = \"darkblue\"),           axis.text.z = element_text(color = \"darkred\"),           axis.title = element_text(margin = margin(t = 30)),           axis.title.x = element_text(color = \"magenta\"))   # Use label params to control axis text placement and rotation ------------- p + coord_3d(xlabels = c(\"ymax\", \"zmax\"),              zlabels = c(\"xmax\", \"ymin\"))  p + coord_3d(rotate_labels = FALSE)"},{"path":"https://matthewkling.github.io/ggcube/reference/create_grid_quads.html","id":null,"dir":"Reference","previous_headings":"","what":"Create quadrilateral faces from grid data — create_grid_quads","title":"Create quadrilateral faces from grid data — create_grid_quads","text":"Create quadrilateral faces grid data","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/create_grid_quads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create quadrilateral faces from grid data — create_grid_quads","text":"","code":"create_grid_quads(data, light)"},{"path":"https://matthewkling.github.io/ggcube/reference/create_grid_quads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create quadrilateral faces from grid data — create_grid_quads","text":"data Regular grid data frame","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/create_grid_quads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create quadrilateral faces from grid data — create_grid_quads","text":"Data frame quad faces computed gradients","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/create_grid_segments.html","id":null,"dir":"Reference","previous_headings":"","what":"Create grid segments for rendering — create_grid_segments","title":"Create grid segments for rendering — create_grid_segments","text":"Create grid segments rendering","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/create_grid_segments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create grid segments for rendering — create_grid_segments","text":"","code":"create_grid_segments(grid_data, plot_bounds)"},{"path":"https://matthewkling.github.io/ggcube/reference/create_grid_segments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create grid segments for rendering — create_grid_segments","text":"grid_data Transformed grid data plot_bounds Bounds final plot xmin, xmax, ymin, ymax","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/create_grid_segments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create grid segments for rendering — create_grid_segments","text":"Data frame segment coordinates grid grob","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/create_light_gradients.html","id":null,"dir":"Reference","previous_headings":"","what":"Create shading gradients for colorbar — create_light_gradients","title":"Create shading gradients for colorbar — create_light_gradients","text":"Create shading gradients colorbar","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/create_light_gradients.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create shading gradients for colorbar — create_light_gradients","text":"","code":"create_light_gradients(   base_colors,   lighting_info,   shade_range = c(-1, 1),   n_steps = 20 )"},{"path":"https://matthewkling.github.io/ggcube/reference/create_light_gradients.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create shading gradients for colorbar — create_light_gradients","text":"base_colors Character vector base colors lighting_info Lighting specification object n_steps Number lighting gradient steps (default 10)","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/create_light_gradients.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create shading gradients for colorbar — create_light_gradients","text":"Matrix colors lighting applied","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/create_pillars.html","id":null,"dir":"Reference","previous_headings":"","what":"Create pillar faces from grid data — create_pillars","title":"Create pillar faces from grid data — create_pillars","text":"Create pillar faces grid data","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/create_pillars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create pillar faces from grid data — create_pillars","text":"","code":"create_pillars(data, x_spacing, y_spacing, width, selected_faces)"},{"path":"https://matthewkling.github.io/ggcube/reference/create_pillars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create pillar faces from grid data — create_pillars","text":"data Data frame x, y, z, zmin columns x_spacing Grid spacing x direction y_spacing Grid spacing y direction width Width factor (1.0 = full grid spacing) selected_faces Character vector face names render","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/create_pillars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create pillar faces from grid data — create_pillars","text":"Data frame pillar face vertices","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/create_voxels.html","id":null,"dir":"Reference","previous_headings":"","what":"Create voxel faces from 3D sparse data — create_voxels","title":"Create voxel faces from 3D sparse data — create_voxels","text":"Create voxel faces 3D sparse data","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/create_voxels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create voxel faces from 3D sparse data — create_voxels","text":"","code":"create_voxels(data, x_spacing, y_spacing, z_spacing, width, selected_faces)"},{"path":"https://matthewkling.github.io/ggcube/reference/create_voxels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create voxel faces from 3D sparse data — create_voxels","text":"data Data frame x, y, z columns x_spacing Grid spacing x direction y_spacing Grid spacing y direction z_spacing Grid spacing z direction width Width factor (1.0 = full grid spacing) selected_faces Character vector face names render","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/create_voxels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create voxel faces from 3D sparse data — create_voxels","text":"Data frame voxel face vertices","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/detect_scale_direction_flip.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect if a scale transformation flips direction — detect_scale_direction_flip","title":"Detect if a scale transformation flips direction — detect_scale_direction_flip","text":"Detect scale transformation flips direction","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/detect_scale_direction_flip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect if a scale transformation flips direction — detect_scale_direction_flip","text":"","code":"detect_scale_direction_flip(scale_obj)"},{"path":"https://matthewkling.github.io/ggcube/reference/detect_scale_direction_flip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect if a scale transformation flips direction — detect_scale_direction_flip","text":"scale_obj ggplot2 scale object","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/detect_scale_direction_flip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect if a scale transformation flips direction — detect_scale_direction_flip","text":"Logical indicating scale transform flips direction","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/element_rect.html","id":null,"dir":"Reference","previous_headings":"","what":"Rectangle theme element with alpha support — element_rect","title":"Rectangle theme element with alpha support — element_rect","text":"function extends ggplot2::element_rect() support transparency via alpha parameter. maintains full backward compatibility original element_rect() function enabling transparent panel styling, particularly useful foreground panels 3D plots.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/element_rect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rectangle theme element with alpha support — element_rect","text":"","code":"element_rect(   fill = NULL,   colour = NULL,   linewidth = NULL,   linetype = NULL,   color = NULL,   inherit.blank = FALSE,   size = lifecycle::deprecated(),   alpha = NULL )"},{"path":"https://matthewkling.github.io/ggcube/reference/element_rect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rectangle theme element with alpha support — element_rect","text":"fill Fill color rectangle. Use NA fill. colour, color Line color rectangle border. Use NA border. linewidth Line width rectangle border. linetype Line type rectangle border (e.g., \"solid\", \"dashed\"). inherit.blank element inherit element_blank? size Use linewidth instead. alpha Transparency level rectangle fill, ranging 0 (completely transparent) 1 (completely opaque). Particularly useful styling foreground panels 3D plots create layered visual effects.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/element_rect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rectangle theme element with alpha support — element_rect","text":"theme element object can used theme() specifications.","code":""},{"path":[]},{"path":"https://matthewkling.github.io/ggcube/reference/element_rect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rectangle theme element with alpha support — element_rect","text":"","code":"# Basic 3D plot with semi-transparent foreground panels ggplot(mountain, aes(x, y, z)) +   stat_surface_3d(fill = \"darkblue\", color = \"lightblue\", linewidth = .1) +   coord_3d(panels = c(\"background\", \"ymin\")) +   theme(panel.foreground = element_rect(alpha = 0.6))   # Completely transparent foreground panels ggplot(mtcars, aes(mpg, wt, qsec)) +   geom_point() +   coord_3d(panels = \"all\") +   theme(panel.border = element_rect(color = \"black\"),         panel.foreground = element_rect(fill = \"blue\", alpha = 0))"},{"path":"https://matthewkling.github.io/ggcube/reference/extract_aesthetic_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract variable names from aesthetic mappings — extract_aesthetic_vars","title":"Extract variable names from aesthetic mappings — extract_aesthetic_vars","text":"Extract variable names aesthetic mappings","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/extract_aesthetic_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract variable names from aesthetic mappings — extract_aesthetic_vars","text":"","code":"extract_aesthetic_vars(plot_obj)"},{"path":"https://matthewkling.github.io/ggcube/reference/extract_aesthetic_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract variable names from aesthetic mappings — extract_aesthetic_vars","text":"plot_obj ggplot object","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/extract_aesthetic_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract variable names from aesthetic mappings — extract_aesthetic_vars","text":"list x, y, z character vectors variable names","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/extract_light_from_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract lighting information from plot layers — extract_light_from_plot","title":"Extract lighting information from plot layers — extract_light_from_plot","text":"Extract lighting information plot layers","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/extract_light_from_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract lighting information from plot layers — extract_light_from_plot","text":"","code":"extract_light_from_plot()"},{"path":"https://matthewkling.github.io/ggcube/reference/extract_light_from_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract lighting information from plot layers — extract_light_from_plot","text":"List lighting specification NULL none found","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/fit_and_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit and predict with 3D smoothing models — fit_and_predict","title":"Fit and predict with 3D smoothing models — fit_and_predict","text":"Fit predict 3D smoothing models","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/fit_and_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit and predict with 3D smoothing models — fit_and_predict","text":"","code":"fit_and_predict(   data,   new_data,   method,   formula,   method.args,   se = FALSE,   level = 0.95 )"},{"path":"https://matthewkling.github.io/ggcube/reference/fit_and_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit and predict with 3D smoothing models — fit_and_predict","text":"data Data frame x, y, z columns new_data Data frame x, y columns prediction method Smoothing method (\"loess\", \"lm\", \"glm\", \"gam\") formula Model formula (NULL default) method.args Additional arguments fitting function se Logical, whether compute standard errors level Confidence level (used , passed create_confidence_surfaces)","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/fit_and_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit and predict with 3D smoothing models — fit_and_predict","text":"List $fitted optionally $se vectors","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/generate_circle_vertices.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate circle vertices in 3D space for a given face — generate_circle_vertices","title":"Generate circle vertices in 3D space for a given face — generate_circle_vertices","text":"Generate circle vertices 3D space given face","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/generate_circle_vertices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate circle vertices in 3D space for a given face — generate_circle_vertices","text":"","code":"generate_circle_vertices(x_std, y_std, z_std, face, radius, n_vertices)"},{"path":"https://matthewkling.github.io/ggcube/reference/generate_circle_vertices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate circle vertices in 3D space for a given face — generate_circle_vertices","text":"x_std, y_std, z_std Standardized point coordinates face Face name (e.g., \"zmin\", \"xmax\") radius Circle radius standardized units n_vertices Number vertices circle","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/generate_circle_vertices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate circle vertices in 3D space for a given face — generate_circle_vertices","text":"Data frame x, y, z coordinates circle vertices","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/generate_point_elements.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate reference elements with simplified approach — generate_point_elements","title":"Generate reference elements with simplified approach — generate_point_elements","text":"Generate reference elements simplified approach","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/generate_point_elements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate reference elements with simplified approach — generate_point_elements","text":"","code":"generate_point_elements(   data,   raw_points,   ref_faces,   ref_points,   ref_lines,   ref_circle_radius,   ref_circle_vertices )"},{"path":"https://matthewkling.github.io/ggcube/reference/generate_point_elements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate reference elements with simplified approach — generate_point_elements","text":"data Original point data raw_points Whether include raw points ref_faces Character vector face names ref_points Type reference points: FALSE, \"circles\", \"points\" ref_lines Whether include reference lines ref_circle_radius Radius circular reference points ref_circle_vertices Number vertices circular reference points","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/generate_point_elements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate reference elements with simplified approach — generate_point_elements","text":"Data frame reference elements","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/geom_path_3d.html","id":null,"dir":"Reference","previous_headings":"","what":"3D connected paths with depth-based scaling and proper depth sorting — geom_path_3d","title":"3D connected paths with depth-based scaling and proper depth sorting — geom_path_3d","text":"geom_path_3d() connects observations 3D space order appear data. converts path data individual segments proper depth sorting maintaining appearance connected paths. path divided segments can depth-sorted independently.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/geom_path_3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3D connected paths with depth-based scaling and proper depth sorting — geom_path_3d","text":"","code":"geom_path_3d(   mapping = NULL,   data = NULL,   stat = StatPath3D,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   scale_depth = TRUE,   arrow = NULL,   lineend = \"butt\" )"},{"path":"https://matthewkling.github.io/ggcube/reference/geom_path_3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D connected paths with depth-based scaling and proper depth sorting — geom_path_3d","text":"mapping Set aesthetic mappings created aes(). Requires x, y, z coordinates. Grouping aesthetics determine separate paths. data data displayed layer. stat statistical transformation use data. Defaults StatPath3D converts paths segments. position Position adjustment, defaults \"identity\". ... arguments passed layer(). na.rm FALSE, missing values removed warning. show.legend Logical indicating whether layer included legends. inherit.aes FALSE, overrides default aesthetics. scale_depth Logical indicating whether apply depth-based scaling linewidth. TRUE (default), path segments closer viewer appear thicker, segments farther away appear thinner. arrow Specification arrow heads, created arrow(). lineend Line end style, one \"round\", \"butt\", \"square\".","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/geom_path_3d.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"3D connected paths with depth-based scaling and proper depth sorting — geom_path_3d","text":"geom_path_3d() understands following aesthetics: x, y, z: Coordinates (required) group: Grouping variable create separate paths colour: Line color linewidth: Line width (gets depth-scaled scale_depth = TRUE) linetype: Line type alpha: Transparency","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/geom_path_3d.html","id":"grouping","dir":"Reference","previous_headings":"","what":"Grouping","title":"3D connected paths with depth-based scaling and proper depth sorting — geom_path_3d","text":"Multiple paths created based grouping aesthetics (group, colour, etc.). group forms separate path, segments different paths can interleaved depth sorting proper 3D rendering.","code":""},{"path":[]},{"path":"https://matthewkling.github.io/ggcube/reference/geom_path_3d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"3D connected paths with depth-based scaling and proper depth sorting — geom_path_3d","text":"","code":"library(ggplot2)  x <- seq(0, 20*pi, pi/16) spiral <- data.frame(   x = x,   y = sin(x),   z = cos(x))  # Basic path ggplot(spiral, aes(x, y, z)) +   geom_path_3d() +   coord_3d()   # With aesthetic coloring ggplot(spiral, aes(x, y, z, color = y)) +   geom_path_3d(linewidth = 1, lineend = \"round\") +   coord_3d() +   scale_color_gradientn(colors = c(\"red\", \"purple\", \"blue\"))   # With grouping ggplot(spiral, aes(x, y, z, color = x > 30)) +   geom_path_3d(linewidth = 1, lineend = \"round\") +   coord_3d()"},{"path":"https://matthewkling.github.io/ggcube/reference/geom_point_3d.html","id":null,"dir":"Reference","previous_headings":"","what":"3D scatter plot with depth-based size scaling and reference projections — geom_point_3d","title":"3D scatter plot with depth-based size scaling and reference projections — geom_point_3d","text":"geom_point_3d() creates scatter plots 3D space automatic depth-based size scaling. Points closer viewer appear larger, points farther away appear smaller, creating realistic perspective effects. Optionally adds reference lines points projecting cube faces.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/geom_point_3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3D scatter plot with depth-based size scaling and reference projections — geom_point_3d","text":"","code":"geom_point_3d(   mapping = NULL,   data = NULL,   stat = StatPoint3D,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   scale_depth = TRUE,   raw_points = TRUE,   ref_lines = FALSE,   ref_points = FALSE,   ref_faces = \"zmin\",   ref_circle_radius = 1.5,   ref_circle_vertices = 16,   ref_line_color = NULL,   ref_line_colour = NULL,   ref_line_linewidth = 0.25,   ref_line_linetype = NULL,   ref_line_alpha = NULL,   ref_point_color = NULL,   ref_point_colour = NULL,   ref_point_fill = NULL,   ref_point_size = NULL,   ref_point_alpha = NULL,   ref_point_stroke = NULL,   ref_point_shape = NULL )"},{"path":"https://matthewkling.github.io/ggcube/reference/geom_point_3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D scatter plot with depth-based size scaling and reference projections — geom_point_3d","text":"mapping Set aesthetic mappings created aes(). addition standard point aesthetics, geom_point_3d() requires x, y, z coordinates. data data displayed layer. stat statistical transformation use data. Defaults StatPoint3D proper discrete scale handling reference line support. position Position adjustment, defaults \"identity\". ... arguments passed layer(). na.rm FALSE, missing values removed warning. show.legend Logical indicating whether layer included legends. inherit.aes FALSE, overrides default aesthetics. scale_depth Logical indicating whether apply depth-based scaling point sizes, point stroke widths, reference line widths. TRUE (default), points/lines closer viewer appear larger/wider, points farther away appear smaller. FALSE, points/lines uniform size/width. raw_points Logical indicating whether show original 3D points. Default TRUE. ref_lines Logical indicating whether show reference lines projecting points cube faces. Default FALSE. ref_points Type reference points create. Options: FALSE: reference points (default) TRUE \"circles\": Circular reference points project properly \"points\": Single-point references (renders faster supports non-circular shapes, point shape 3D-transformed) ref_faces Character vector specifying cube faces project . Valid face names : \"xmin\", \"xmax\", \"ymin\", \"ymax\", \"zmin\", \"zmax\". Default \"zmin\" (bottom face). Multiple faces can specified. ref_circle_radius Radius circular reference points percentage standardized coordinate space. ref_circle_vertices Number vertices circular reference points (higher = smoother). ref_line_color, ref_line_colour, ref_line_linewidth, ref_line_linetype, ref_line_alpha Styling overrides reference lines. NULL, inherits point aesthetics uses defaults. American (ref_line_color) British (ref_line_colour) spellings accepted. ref_point_color, ref_point_colour, ref_point_fill, ref_point_size, ref_point_alpha, ref_point_stroke, ref_point_shape Styling overrides reference points circles. NULL, inherits raw point aesthetics shape-aware logic (complex shapes 21-25 vs simple shapes 0-20/characters). American (ref_point_color) British (ref_point_colour) spellings accepted.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/geom_point_3d.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"3D scatter plot with depth-based size scaling and reference projections — geom_point_3d","text":"geom_point_3d() supports aesthetics geom_point(), plus z: x: X coordinate (required) y: Y coordinate (required) z: Z coordinate (required) alpha: Transparency colour: Point border color fill: Point fill color (certain shapes) shape: Point shape size: Point size (gets depth-scaled scale_depth = TRUE) stroke: Border width shapes borders","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/geom_point_3d.html","id":"depth-scaling","dir":"Reference","previous_headings":"","what":"Depth Scaling","title":"3D scatter plot with depth-based size scaling and reference projections — geom_point_3d","text":"depth scaling uses inverse relationship distance, following mathematical relationship: apparent_size = base_size * reference_distance / actual_distance creates realistic perspective : Objects twice far appear half big Objects twice close appear twice big center plot volume renders exactly user-specified size","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/geom_point_3d.html","id":"point-rendering","dir":"Reference","previous_headings":"","what":"Point Rendering","title":"3D scatter plot with depth-based size scaling and reference projections — geom_point_3d","text":"ggcube uses shape-aware rendering improved stroke behavior: Simple shapes (0-20, characters): Use size fontsize, stroke border width, fill Complex shapes (21-25): Use ggplot2's approach: size + 0.5*stroke fontsize prevent gaps size stroke depth-scaled scale_depth = TRUE shapes preserve stroke depth scaling parameter control","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/geom_point_3d.html","id":"reference-features","dir":"Reference","previous_headings":"","what":"Reference Features","title":"3D scatter plot with depth-based size scaling and reference projections — geom_point_3d","text":"Reference lines points help visualize 3D relationships projecting data points onto cube faces: Reference lines: Connect 3D point projection specified faces Reference points: Show projected location faces Reference circles: Circular projections appear realistic 3D shadows Depth sorting: elements (original points, reference lines, reference points) automatically depth-sorted proper 3D rendering","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/geom_point_3d.html","id":"aesthetic-inheritance","dir":"Reference","previous_headings":"","what":"Aesthetic Inheritance","title":"3D scatter plot with depth-based size scaling and reference projections — geom_point_3d","text":"Reference elements intelligently inherit styling raw points: Shape-aware: Complex shapes (21-25) fill/colour handled differently simple shapes (0-20/characters) Alpha detection: points alpha=1, uses 0.5 default ref elements; otherwise inherits mapped alpha Priority: Explicit ref_* parameters > mapped aesthetics > smart defaults","code":""},{"path":[]},{"path":"https://matthewkling.github.io/ggcube/reference/geom_point_3d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"3D scatter plot with depth-based size scaling and reference projections — geom_point_3d","text":"","code":"library(ggplot2)  # Basic 3D scatter plot with depth scaling ggplot(expand.grid(x = 1:5, y = 1:5, z = 1:5),        aes(x, y, z, fill = z)) +   geom_point_3d(size = 10, shape = 21, color = \"white\", stroke = .1) +   coord_3d(pitch = 40, roll = 5, yaw = 0, dist = 1.5) +   scale_fill_viridis_c()   # Add circular reference points on 2D face panel ggplot(mtcars, aes(mpg, wt, qsec)) +   geom_point_3d(size = 3,     ref_points = TRUE, ref_lines = TRUE, ref_faces = \"zmin\") +   coord_3d()   # Aesthetic inheritance - ref elements inherit color and fill ggplot(mpg, aes(displ, hwy, cty, color = cty, fill = cty)) +   geom_point_3d(shape = 21, size = 3,                 ref_points = TRUE, ref_lines = TRUE,                 ref_faces = \"zmin\") +   coord_3d()   # Use point-style references with custom shape ggplot(mtcars, aes(mpg, wt, qsec)) +   geom_point_3d(ref_points = \"points\", ref_lines = TRUE,                 ref_point_shape = 4, ref_point_size = 2,                 ref_line_alpha = 0.5) +   coord_3d()   # Show only circular reference projections (no original points) ggplot(mtcars, aes(mpg, wt, qsec)) +   geom_point_3d(raw_points = FALSE, ref_points = \"circles\", ref_lines = TRUE,                 ref_faces = c(\"zmin\", \"ymin\")) +   coord_3d()   # Project to multiple faces with custom circle styling ggplot(mtcars, aes(mpg, wt, qsec, color = factor(cyl))) +   geom_point_3d(ref_points = \"circles\", ref_lines = TRUE,                 ref_faces = c(\"zmin\", \"ymin\", \"xmax\"),                 ref_line_color = \"grey50\", ref_line_alpha = 0.3,                 ref_point_fill = \"white\", ref_point_stroke = 0.8,                 ref_circle_radius = 1) +   coord_3d()   # Disable depth scaling for uniform sizes ggplot(mtcars, aes(mpg, wt, qsec)) +   geom_point_3d(scale_depth = FALSE, size = 3) +   coord_3d()"},{"path":"https://matthewkling.github.io/ggcube/reference/geom_polygon_3d.html","id":null,"dir":"Reference","previous_headings":"","what":"3D polygon geometry with depth sorting — geom_polygon_3d","title":"3D polygon geometry with depth sorting — geom_polygon_3d","text":"geom_polygon_3d() renders 3D polygons proper depth sorting realistic 3D surface visualization. designed work surface data stat_hull_3d() stat_surface_3d(), well regular polygon data like maps.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/geom_polygon_3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3D polygon geometry with depth sorting — geom_polygon_3d","text":"","code":"geom_polygon_3d(   mapping = NULL,   data = NULL,   stat = StatIdentity3D,   sort_method = \"auto\",   scale_depth = TRUE,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://matthewkling.github.io/ggcube/reference/geom_polygon_3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D polygon geometry with depth sorting — geom_polygon_3d","text":"mapping Set aesthetic mappings created aes(). data data displayed layer. stat statistical transformation use data. Defaults StatIdentity3D proper discrete scale handling group preservation. sort_method Character indicating algorithm used determine order polygons rendered. \"painter\": Polygons sorted mean depth (distance viewer rotation) vertices. fast, can give incorrect results certain cases. \"pairwise\": intensive sorting algorithm compares every pair polygons 3D determine face rendered behind ; slower accurate. \"auto\": default. Uses pairwise polygon data less 500 rows painter otherwise. scale_depth Logical indicating whether polygon linewidths scaled make closer lines wider farther lines narrower. Default TRUE. Scaling based mean depth polygon. position Position adjustment, defaults \"identity\". ... arguments passed layer(). na.rm FALSE, missing values removed warning. show.legend Logical indicating whether layer included legends. inherit.aes FALSE, overrides default aesthetics.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/geom_polygon_3d.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"3D polygon geometry with depth sorting — geom_polygon_3d","text":"geom_polygon_3d() requires: x: X coordinate y: Y coordinate z: Z coordinate (depth sorting) group: Polygon grouping variable understands additional aesthetics: fill: Polygon fill color colour: Border color linewidth: Border line width linetype: Border line type alpha: Transparency order: Vertex order within polygons (proper polygon construction)","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/geom_polygon_3d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"3D polygon geometry with depth sorting — geom_polygon_3d","text":"","code":"# Typically used via stats like stat_surface_3d() or stat_hull_3d() ggplot(sphere_points, aes(x, y, z)) +   stat_hull_3d(method = \"convex\", fill = \"dodgerblue\",             light = light(fill = TRUE, mode = \"hsl\")) +   coord_3d()   # Can be used directly with properly structured data triangles <- data.frame(x = rep(c(1, 2, 3), 3),                             y = rep(c(1, 3, 1), 3),                             z = rep(1:3, each = 3),                             shape = rep(letters[1:3], each = 3)) ggplot(triangles, aes(x, y, z, fill = shape)) +   geom_polygon_3d(color = \"black\") +   coord_3d()   # Use `sort_method` to choose between depth sorting algorithms d <- data.frame(group = rep(letters[1:3], each = 4),                 x = c(1, 1, 2, 2,   1, 1, 3, 3,   2, 2, 3, 3),                 y = rep(c(1, 2, 2, 1), 3),                 z = rep(c(1, 1.5, 2), each = 4)) p <- ggplot(d, aes(x, y, z, group = group, fill = group)) +       coord_3d(pitch = 50, roll = 20, yaw = 0, scales = \"fixed\") +       theme_light()  # fast, but rendering order is incorrect in this particular example p + geom_polygon_3d(color = \"black\", linewidth = 1, alpha = .75,       sort_method = \"painter\")   # correct rendering order (but slower for large data sets) p + geom_polygon_3d(color = \"black\", linewidth = 1, alpha = .75,       sort_method = \"pairwise\")"},{"path":"https://matthewkling.github.io/ggcube/reference/geom_segment_3d.html","id":null,"dir":"Reference","previous_headings":"","what":"3D line segments with depth-based scaling and proper depth sorting — geom_segment_3d","title":"3D line segments with depth-based scaling and proper depth sorting — geom_segment_3d","text":"geom_segment_3d() draws line segments 3D space automatic depth-based linewidth scaling proper depth sorting. segment defined start coordinates (x, y, z) end coordinates (xend, yend, zend).","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/geom_segment_3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3D line segments with depth-based scaling and proper depth sorting — geom_segment_3d","text":"","code":"geom_segment_3d(   mapping = NULL,   data = NULL,   stat = StatSegment3D,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   scale_depth = TRUE,   arrow = NULL,   lineend = \"butt\" )"},{"path":"https://matthewkling.github.io/ggcube/reference/geom_segment_3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D line segments with depth-based scaling and proper depth sorting — geom_segment_3d","text":"mapping Set aesthetic mappings created aes(). Requires x, y, z start coordinates xend, yend, zend end coordinates. data data displayed layer. stat statistical transformation use data. Defaults StatSegment3D proper discrete scale handling. position Position adjustment, defaults \"identity\". ... arguments passed layer(). na.rm FALSE, missing values removed warning. show.legend Logical indicating whether layer included legends. inherit.aes FALSE, overrides default aesthetics. scale_depth Logical indicating whether apply depth-based scaling linewidth. TRUE (default), segments closer viewer appear thicker, segments farther away appear thinner. arrow Specification arrow heads, created arrow(). lineend Line end style, one \"round\", \"butt\", \"square\".","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/geom_segment_3d.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"3D line segments with depth-based scaling and proper depth sorting — geom_segment_3d","text":"geom_segment_3d() understands following aesthetics: x, y, z: Start coordinates (required) xend, yend, zend: End coordinates (required) colour: Line color linewidth: Line width (gets depth-scaled scale_depth = TRUE) linetype: Line type alpha: Transparency","code":""},{"path":[]},{"path":"https://matthewkling.github.io/ggcube/reference/geom_segment_3d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"3D line segments with depth-based scaling and proper depth sorting — geom_segment_3d","text":"","code":"library(ggplot2)  # Basic 3D segments ggplot(sphere_points,       aes(x, y, z, xend = 0, yend = 0, zend = 0)) +   geom_segment_3d() +   coord_3d()   # 3D vector field ggplot(data, aes(x, y, z,       xend = xend, yend = yend, zend = zend, color = x)) +   geom_segment_3d(arrow = arrow(length = unit(0.1, \"inches\"),                   type = \"closed\", angle = 15),                   linewidth = .5) +   coord_3d() #> Error in ggplot(data, aes(x, y, z, xend = xend, yend = yend, zend = zend,     color = x)): `data` cannot be a function. #> ℹ Have you misspelled the `data` argument in `ggplot()`"},{"path":"https://matthewkling.github.io/ggcube/reference/geom_smooth_3d.html","id":null,"dir":"Reference","previous_headings":"","what":"3D smoothing geometry — geom_smooth_3d","title":"3D smoothing geometry — geom_smooth_3d","text":"3D smoothing geometry","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/geom_smooth_3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3D smoothing geometry — geom_smooth_3d","text":"","code":"geom_smooth_3d(   mapping = NULL,   data = NULL,   stat = StatSmooth3D,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://matthewkling.github.io/ggcube/reference/get_scale_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get axis name for a single scale with proper fallback hierarchy — get_scale_names","title":"Get axis name for a single scale with proper fallback hierarchy — get_scale_names","text":"Get axis name single scale proper fallback hierarchy","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/get_scale_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get axis name for a single scale with proper fallback hierarchy — get_scale_names","text":"","code":"get_scale_names(scale_obj, axis_name)"},{"path":"https://matthewkling.github.io/ggcube/reference/get_scale_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get axis name for a single scale with proper fallback hierarchy — get_scale_names","text":"scale_obj Scale object (can NULL z-axis) axis_name Axis name (\"x\", \"y\", \"z\")","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/get_scale_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get axis name for a single scale with proper fallback hierarchy — get_scale_names","text":"Single axis name string","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/ggcube.html","id":null,"dir":"Reference","previous_headings":"","what":"ggcube: 3D plotting extension for ggplot2 — ggcube","title":"ggcube: 3D plotting extension for ggplot2 — ggcube","text":"ggcube extends ggplot2 third dimension, providing 3D coordinate systems, surface plotting, volumetric visualization capabilities.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/ggcube.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ggcube: 3D plotting extension for ggplot2 — ggcube","text":"use ggcube, load packages: library(ggplot2) library(ggcube) Key functions: coord_3d(): 3D coordinate system rotation perspective aes(): Enhanced aesthetic mapping positional z support stat_surface_3d(): Surface plotting grid data stat_hull_3d(): 3D convex alpha hulls stat_voxel_3d(): 3D voxel visualization stat_pillar_3d(): 3D pillar/bar charts light(): Lighting specifications 3D surfaces","code":""},{"path":[]},{"path":"https://matthewkling.github.io/ggcube/reference/guide_3d.html","id":null,"dir":"Reference","previous_headings":"","what":"Color guides showing lighting effects — guide_3d","title":"Color guides showing lighting effects — guide_3d","text":"Creates color guides show shading variation gradients within color. Shows full range colors visible shading enabled 3D plots.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/guide_3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Color guides showing lighting effects — guide_3d","text":"","code":"guide_colorbar_3d(reverse_shade = FALSE, shade_range = c(-0.5, 0.5), ...)  guide_legend_3d(reverse_shade = FALSE, shade_range = c(-0.5, 0.5), ...)"},{"path":"https://matthewkling.github.io/ggcube/reference/guide_3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Color guides showing lighting effects — guide_3d","text":"reverse_shade Logical. TRUE, reverses lighting gradient direction. default, shadows placed left, bottom horizontal colorbars. ... Additional arguments passed guide_colorbar() guide_legend(). shade_limits Length-2 numeric vector range -1 1, giving limits shading gradient. -1 full shade, 1 full highlight. Default c(-.5, 5).","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/guide_3d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Color guides showing lighting effects — guide_3d","text":"guide object displays shading effects","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/guide_3d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Color guides showing lighting effects — guide_3d","text":"fill color aesthetics map variable (e.g., aes(fill = z, color = z)), ggplot2 creates shared scale single guide. case, use guides(fill = guide_*_3d()) apply shading, guides(color = guide_*_3d()), even layer uses color aesthetic. use color guide color fill map different variables want separate guides .","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/guide_3d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Color guides showing lighting effects — guide_3d","text":"","code":"# continuous `colorbar` guide ggplot(mountain, aes(x, y, z, fill = z)) +    stat_surface_3d(light = light(mode = \"hsl\", direction = c(1, 0, 0))) +    guides(fill = guide_colorbar_3d()) +    scale_fill_gradientn(colors = c(\"tomato\", \"dodgerblue\")) +    coord_3d()   # discrete `legend` guide ggplot(mountain, aes(x, y, z, fill = x > .5, group = 1)) +    stat_surface_3d(light = light(mode = \"hsl\", direction = c(1, 0, 0))) +    guides(fill = guide_legend_3d()) +    coord_3d()"},{"path":"https://matthewkling.github.io/ggcube/reference/hsl2rgb.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert HSL to RGB color space — hsl2rgb","title":"Convert HSL to RGB color space — hsl2rgb","text":"Convert HSL RGB color space","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/hsl2rgb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert HSL to RGB color space — hsl2rgb","text":"","code":"hsl2rgb(hsl_matrix)"},{"path":"https://matthewkling.github.io/ggcube/reference/hsl2rgb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert HSL to RGB color space — hsl2rgb","text":"hsl_matrix 3xN matrix HSL values (H 0,1, S 0,1, L 0,1)","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/hsl2rgb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert HSL to RGB color space — hsl2rgb","text":"3xN matrix RGB values 0,1 range","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/is_theme_void_like.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if theme is void-like (has multiple key elements set to element_blank) — is_theme_void_like","title":"Check if theme is void-like (has multiple key elements set to element_blank) — is_theme_void_like","text":"Check theme void-like (multiple key elements set element_blank)","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/is_theme_void_like.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if theme is void-like (has multiple key elements set to element_blank) — is_theme_void_like","text":"","code":"is_theme_void_like(theme_obj)"},{"path":"https://matthewkling.github.io/ggcube/reference/is_theme_void_like.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if theme is void-like (has multiple key elements set to element_blank) — is_theme_void_like","text":"theme_obj Theme object theme list","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/is_theme_void_like.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if theme is void-like (has multiple key elements set to element_blank) — is_theme_void_like","text":"Logical indicating theme appears void-like","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/light.html","id":null,"dir":"Reference","previous_headings":"","what":"Lighting specification for 3D surface rendering — light","title":"Lighting specification for 3D surface rendering — light","text":"Creates lighting specification object use 3D polygon layers. Lighting modifies brightness fill /base color aesthetics based surface orientation (.e., implements form shadows cast shadows). Various options available control light qualities light source location.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/light.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lighting specification for 3D surface rendering — light","text":"","code":"light(   method = \"diffuse\",   direction = c(1, 0, 1),   position = NULL,   distance_falloff = FALSE,   fill = TRUE,   color = TRUE,   mode = \"hsv\",   contrast = 1 )"},{"path":"https://matthewkling.github.io/ggcube/reference/light.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lighting specification for 3D surface rendering — light","text":"method Character string specifying lighting model: \"diffuse\": default. Atmospheric lighting soft shadows (surfaces pointing directly away light source fully dark; base color occurs surfaces perpendicular light) \"direct\": Direct lighting hard shadows (surfaces angled beyond 90 degrees light source fully dark; base color occurs surfaces angled 45 degrees toward light) \"normal_rgb\": Map surface normals RGB colors direction Numeric vector length 3 specifying direction 3D space light comes directional lighting. default c(1, 0, 1), giving diagonal lighting upper right edge default rotation. Common examples: c(0, 0, 1) gives overhead lighting, c(1, 0, 0) lights surfaces facing positive x direction, c(-1, -1, 0) lights surfaces facing negative x-y edge. least one value must non-zero. Values automatically normalized, magnitude matter, sign relative magnitude. Direction relative data axes, rotated figure. argument ignored position provided. position Numeric vector length 3 specifying light source position data coordinate space positional lighting. specified, face gets light direction calculated light position face center. Mutually exclusive direction. Default NULL (use directional lighting). distance_falloff Logical indicating whether apply distance-based intensity falloff positional lighting using inverse square law (intensity ∝ 1/distance²). used position specified. Default FALSE. fill Logical indicating whether apply lighting fill colors. Default TRUE. color Logical indicating whether apply lighting border/line colors. Default TRUE. mode Character string specifying color lighting mode: \"hsv\": default. Modifies value component HSV color (fades bright colors high end, black low end) \"hsl\": Modifies lightness component HSL color (fades white high end, black low end) contrast Numeric value greater zero controlling intensity lighting effects. 1.0 (default) gives full black--white range. Values less 1 give subtler effects, values greater 1 give dramatic effects.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/light.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lighting specification for 3D surface rendering — light","text":"lighting object can passed 3D surface stats.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/light.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lighting specification for 3D surface rendering — light","text":"Note light-like effects can also achieved stats mapping color aesthestics computed variables after_stat(dzdx); see stat_surface_3d() examples.","code":""},{"path":[]},{"path":"https://matthewkling.github.io/ggcube/reference/light.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lighting specification for 3D surface rendering — light","text":"","code":"# base plot used in examples p <- ggplot(mountain, aes(x, y, z)) + coord_3d(ratio = c(1, 1.5, 1))   # Light qualities ------------------------  # default diffuse lighting p + stat_surface_3d(fill = \"steelblue\", color = \"black\")   # use \"hsl\" mode to fade highlights to white p + stat_surface_3d(fill = \"steelblue\", color = \"black\",                     light = light(mode = \"hsl\"))   # adjust lighting intensity with `contrast` p + stat_surface_3d(fill = \"steelblue\", color = \"black\",                     light = light(mode = \"hsl\", contrast = 2))   # use \"direct\" lighting to apply full shade to unlit surfaces p + stat_surface_3d(fill = \"steelblue\", color = \"black\",                     light = light(method = \"direct\", contrast = .75))   # use \"rgb\" to plot each face orientation in a unique color p + stat_surface_3d(light = light(method = \"normal_rgb\")) #> Warning: Color shading is not supported with normal_rgb lighting method #> Warning: Color shading is not supported with normal_rgb lighting method    # Lighting targets -----------------------  # use `fill` and `color` to select which aesthetics get lighting p + stat_surface_3d(fill = \"steelblue\", color = \"black\",                     light = light(fill = TRUE, color = FALSE))   # disable lighting entirely # (equivalent to specifying `light(fill = FALSE, color = FALSE`)) p + stat_surface_3d(fill = \"steelblue\", color = \"black\", light = NULL)   # apply lighting on top of aesthetic mapping, with shaded guide p + stat_surface_3d(aes(fill = z, color = z),                     light = light(contrast = 2)) +       scale_fill_viridis_c() +       scale_color_viridis_c() +       guides(fill = guide_colorbar_3d())    # Light sources -----------------------  # set directional light as horizontal from back left corner # (left = negative x, back = positive y, horizontal = neutral z) p + stat_surface_3d(fill = \"steelblue\", color = \"black\",                     light = light(direction = c(-1, 1, 0)))   # specify positional light source within plot p + stat_surface_3d(fill = \"red\", color = \"red\",                     light = light(position = c(.5, .7, 95),                                   distance_falloff = TRUE,                                   mode = \"hsl\", contrast = .9))"},{"path":"https://matthewkling.github.io/ggcube/reference/lorenz_attractor.html","id":null,"dir":"Reference","previous_headings":"","what":"Lorenz butterfly attractor generator — lorenz_attractor","title":"Lorenz butterfly attractor generator — lorenz_attractor","text":"Lorenz butterfly attractor generator","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/lorenz_attractor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lorenz butterfly attractor generator — lorenz_attractor","text":"","code":"lorenz_attractor(n_points = 5000, dt = 0.01, sigma = 10, rho = 28, beta = 8/3)"},{"path":"https://matthewkling.github.io/ggcube/reference/make_scale_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate grid data using actual scale breaks with aspect ratio — make_scale_grid","title":"Generate grid data using actual scale breaks with aspect ratio — make_scale_grid","text":"Generate grid data using actual scale breaks aspect ratio","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/make_scale_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate grid data using actual scale breaks with aspect ratio — make_scale_grid","text":"","code":"make_scale_grid(visible_faces, scale_info, scales = \"free\", ratio = c(1, 1, 1))"},{"path":"https://matthewkling.github.io/ggcube/reference/make_scale_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate grid data using actual scale breaks with aspect ratio — make_scale_grid","text":"visible_faces Character vector visible face names scale_info List containing limits breaks x, y, z scales Aspect ratio behavior (\"free\" \"fixed\") ratio Length-3 numeric vector axis ratios","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/make_scale_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate grid data using actual scale breaks with aspect ratio — make_scale_grid","text":"Data frame grid lines standard domain, including break values","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/make_tile_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate regular grids — make_tile_grid","title":"Generate regular grids — make_tile_grid","text":"Creates rectangular, hexagonal, triangular grid specified proportions. Returns tile vertex data formatted geom_poygon()","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/make_tile_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate regular grids — make_tile_grid","text":"","code":"make_tile_grid(   grid = c(\"rect\", \"tri\", \"hex\"),   n = 40,   direction = c(\"x\", \"y\"),   xlim,   ylim )"},{"path":"https://matthewkling.github.io/ggcube/reference/make_tile_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate regular grids — make_tile_grid","text":"grid Character argument specifying geometry grid generate. Options include \"rect\" rectangular grid (default), \"tri\" triangular grid, \"hex\" hexagonal grid. n Either single integer specifying grid resolution dimensions, vector length 2 specifying c(nx, ny) different resolutions. Default 40. Higher values create smoother surfaces slower rendering. direction Either \"x\" (default) \"y\", specifying orientation tile rows. Ignored rectangular grids. xlim, ylim Length-two numeric vectors bounding box generate grid.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/make_tile_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate regular grids — make_tile_grid","text":"data frame following columns: x, y, group (integer denoting) unique polygon id, order (integer giving vertex order, plotting).","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/make_tile_grid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate regular grids — make_tile_grid","text":"Grids constructed tiles approximately equilateral scaled square domain, unless n gives separate resolution values two dimensions. triangular hexagonal grids, means n approximate.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/mountain.html","id":null,"dir":"Reference","previous_headings":"","what":"Mountain — mountain","title":"Mountain — mountain","text":"terrain data set representing elevation variation x-y grid.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/mountain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mountain — mountain","text":"","code":"mountain"},{"path":[]},{"path":"https://matthewkling.github.io/ggcube/reference/mountain.html","id":"mountain","dir":"Reference","previous_headings":"","what":"mountain","title":"Mountain — mountain","text":"data frame 1290 rows 3 columns (x, y, z)","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/mountain.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mountain — mountain","text":"derived datasets::volcano data set","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/normalize_light_direction.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize light direction vector — normalize_light_direction","title":"Normalize light direction vector — normalize_light_direction","text":"Normalize light direction vector","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/normalize_light_direction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize light direction vector — normalize_light_direction","text":"","code":"normalize_light_direction(light_dir)"},{"path":"https://matthewkling.github.io/ggcube/reference/normalize_light_direction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize light direction vector — normalize_light_direction","text":"light_dir Numeric vector length 3","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/normalize_light_direction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize light direction vector — normalize_light_direction","text":"Normalized light direction vector","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/points_to_circles.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert ref_circle points to circular polygons — points_to_circles","title":"Convert ref_circle points to circular polygons — points_to_circles","text":"Convert ref_circle points circular polygons","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/points_to_circles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert ref_circle points to circular polygons — points_to_circles","text":"","code":"points_to_circles(data, data_std)"},{"path":"https://matthewkling.github.io/ggcube/reference/points_to_circles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert ref_circle points to circular polygons — points_to_circles","text":"data Original data frame data_std Standardized data frame","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/points_to_circles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert ref_circle points to circular polygons — points_to_circles","text":"Data frame circular polygons replacing ref_circle points","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/position_on_face.html","id":null,"dir":"Reference","previous_headings":"","what":"Position for projecting 2D and 3D layers onto 3D cube faces — position_on_face","title":"Position for projecting 2D and 3D layers onto 3D cube faces — position_on_face","text":"position_on_face() enables layers projected onto 2D faces 3D coordinate cube. can used flatten 3D ggcube layers onto single cube face way visualizing 2D, add natively 2D ggplot2 layers like geom_density_2d() geom_smooth() cube face.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/position_on_face.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Position for projecting 2D and 3D layers onto 3D cube faces — position_on_face","text":"","code":"position_on_face(faces = \"zmin\", axes = NULL)"},{"path":"https://matthewkling.github.io/ggcube/reference/position_on_face.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Position for projecting 2D and 3D layers onto 3D cube faces — position_on_face","text":"faces Character string vector specifying cube face(s) project onto. Valid options : \"xmin\", \"xmax\", \"ymin\", \"ymax\", \"zmin\", \"zmax\", \"3D\". \"3D\" indicates raw, non-flattened 3D position. Multiple faces \"3D\" supported 3D layers (axes = NULL). axes 2D layers : Character vector length 2 specifying 3D dimensions 2D layer's x y aesthetics represent. example, c(\"x\", \"z\") means 2D x-axis maps 3D x-axis 2D y-axis maps 3D z-axis. 3D layers, use NULL (default) preserve existing x,y,z mapping.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/position_on_face.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Position for projecting 2D and 3D layers onto 3D cube faces — position_on_face","text":"position adjustment supports 2D 3D layers: 3D layers (axes = NULL): Data already x,y,z coordinates correct order Simply adds projection metadata coord_3d place layer specified face(s) face coordinate overridden coordinate transformation Multiple faces supported - layer duplicated specified face. specified faces inherit aesthetics layer function; want different parameters different faces primary 3D layer, add separate layer call. 2D layers (axes = c(\"dim1\", \"dim2\")): Renames layer's x,y columns match specified 3D axes Adds missing third dimension Adds projection metadata coord_3d single faces supported 2D layers actual projection happens coordinate transformation coord_3d. Compatibility Note: position adjustment compatible 2D stats. works well stat_density_2d() stats depend heavily scale ranges computation, may cause errors rendering issues stat_density_2d_filled() similar stats generate polygons based scale domains, well layers like stat_bin_2d() return position variables x y. geom_smooth(), position works set se = FALSE shown example.","code":""},{"path":[]},{"path":"https://matthewkling.github.io/ggcube/reference/position_on_face.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Position for projecting 2D and 3D layers onto 3D cube faces — position_on_face","text":"","code":"# 3D point layer in raw 3D form, and projected onto 2D face ggplot(sphere_points, aes(x, y, z)) +   geom_point_3d(position = position_on_face(\"zmin\"), color = \"red\") +   geom_point_3d(color = \"black\") + # add this layer last so it appears on top   coord_3d()   # 3D layer projected to multiple faces set.seed(1) d <- data.frame(x = round(rnorm(10)), y = round(rnorm(10)), z = round(rnorm(10))) ggplot(d, aes(x, y, z)) +   stat_voxel_3d(color = \"black\", fill = \"steelblue\",     light = light(shade = \"fill\", direction = c(1, 1, 0), shade_mode = \"hsl\"),     position = position_on_face(c(\"3D\", \"zmin\", \"xmax\", \"ymax\"))) +   coord_3d() #> Error in light(shade = \"fill\", direction = c(1, 1, 0), shade_mode = \"hsl\"): unused arguments (shade = \"fill\", shade_mode = \"hsl\")  # 3D layer projected differently on individual faces ggplot(sphere_points, aes(x, y, z)) +   stat_hull_3d(position = position_on_face(\"zmin\"), fill = \"black\") +   geom_point_3d(position = position_on_face(\"ymax\")) +   geom_path(position = position_on_face(\"xmax\")) +   stat_hull_3d(color = \"black\") +   coord_3d()   # 2D density contour on a specific face ggplot(iris, aes(Sepal.Length, Sepal.Width, Petal.Length, color = Species)) +   stat_density_2d(position = position_on_face(faces = \"zmin\", axes = c(\"x\", \"y\"))) +   geom_point_3d() +   coord_3d() #> Warning: The following aesthetics were dropped during statistical transformation: z. #> ℹ This can happen when ggplot fails to infer the correct grouping structure in #>   the data. #> ℹ Did you forget to specify a `group` aesthetic or to convert a numerical #>   variable into a factor?   # Distinct 2D layers projected to different faces ggplot(mtcars) +   geom_smooth(aes(mpg, qsec), color = \"red\", alpha = .5, se = FALSE,     position = position_on_face(faces = \"ymax\", axes = c(\"x\", \"z\"))) +   geom_density_2d(aes(mpg, wt), alpha = .5,     position = position_on_face(faces = \"zmin\", axes = c(\"x\", \"y\"))) +   geom_path(aes(wt, qsec), color = \"forestgreen\", alpha = .5,     position = position_on_face(faces = \"xmax\", axes = c(\"y\", \"z\"))) +   geom_point_3d(aes(mpg, wt, qsec)) +     coord_3d() +   theme_light() #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'"},{"path":"https://matthewkling.github.io/ggcube/reference/replace_colorbar_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace colorbar colors with shading gradients — replace_colorbar_colors","title":"Replace colorbar colors with shading gradients — replace_colorbar_colors","text":"Replace colorbar colors shading gradients","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/replace_colorbar_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace colorbar colors with shading gradients — replace_colorbar_colors","text":"","code":"replace_colorbar_colors(grob, grad)"},{"path":"https://matthewkling.github.io/ggcube/reference/replace_colorbar_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace colorbar colors with shading gradients — replace_colorbar_colors","text":"grob Original colorbar grob grad Matrix gradient colors","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/replace_colorbar_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace colorbar colors with shading gradients — replace_colorbar_colors","text":"Modified grob gradients","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/rgb2hsl.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert RGB to HSL color space — rgb2hsl","title":"Convert RGB to HSL color space — rgb2hsl","text":"Convert RGB HSL color space","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/rgb2hsl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert RGB to HSL color space — rgb2hsl","text":"","code":"rgb2hsl(rgb_matrix)"},{"path":"https://matthewkling.github.io/ggcube/reference/rgb2hsl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert RGB to HSL color space — rgb2hsl","text":"rgb_matrix 3xN matrix RGB values 0,1 range","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/rgb2hsl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert RGB to HSL color space — rgb2hsl","text":"3xN matrix HSL values (H 0,1, S 0,1, L 0,1)","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/rotate_3d.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotate points in 3D space — rotate_3d","title":"Rotate points in 3D space — rotate_3d","text":"Rotate points 3D space","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/rotate_3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rotate points in 3D space — rotate_3d","text":"","code":"rotate_3d(xyz, pitch, roll, yaw)"},{"path":"https://matthewkling.github.io/ggcube/reference/rotate_3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rotate points in 3D space — rotate_3d","text":"xyz Matrix x, y, z coordinates pitch Rotation around x-axis degrees roll Rotation around y-axis degrees yaw Rotation around z-axis degrees","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/rotate_3d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rotate points in 3D space — rotate_3d","text":"Rotated coordinates matrix","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/scale_to_npc_coordinates.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale transformed coordinates to final npc coordinates — scale_to_npc_coordinates","title":"Scale transformed coordinates to final npc coordinates — scale_to_npc_coordinates","text":"Scale transformed coordinates final npc coordinates","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/scale_to_npc_coordinates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale transformed coordinates to final npc coordinates — scale_to_npc_coordinates","text":"","code":"scale_to_npc_coordinates(x, y = NULL, plot_bounds)"},{"path":"https://matthewkling.github.io/ggcube/reference/scale_to_npc_coordinates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale transformed coordinates to final npc coordinates — scale_to_npc_coordinates","text":"plot_bounds Plot bounds vector xmin, xmax, ymin, ymax result Data frame transformed x, y coordinates","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/scale_to_npc_coordinates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale transformed coordinates to final npc coordinates — scale_to_npc_coordinates","text":"Data frame scaled coordinates","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/scale_to_standard.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale data to standard domain with aspect ratio control — scale_to_standard","title":"Scale data to standard domain with aspect ratio control — scale_to_standard","text":"Scale data standard domain aspect ratio control","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/scale_to_standard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale data to standard domain with aspect ratio control — scale_to_standard","text":"","code":"scale_to_standard(values, data_range, scales = \"free\", ratio = c(1, 1, 1))"},{"path":"https://matthewkling.github.io/ggcube/reference/scale_to_standard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale data to standard domain with aspect ratio control — scale_to_standard","text":"values Vector values scale (single axis) data frame x,y,z columns (multi-axis) data_range Original range data min, max (single axis) list x,y,z scale ranges (multi-axis) scales Aspect ratio behavior (\"free\" \"fixed\") (used multi-axis) ratio Length-3 numeric vector axis ratios (used multi-axis)","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/scale_to_standard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale data to standard domain with aspect ratio control — scale_to_standard","text":"Scaled values -0.5, 0.5 domain (single axis) data frame scaled coordinates (multi-axis)","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/scale_z_continuous.html","id":null,"dir":"Reference","previous_headings":"","what":"Continuous z-axis scale for 3D plots — scale_z_continuous","title":"Continuous z-axis scale for 3D plots — scale_z_continuous","text":"scale_z_continuous creates continuous scale z aesthetic 3D plots. works similarly scale_x_continuous scale_y_continuous, providing control axis breaks, labels, limits, transformations z dimension.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/scale_z_continuous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Continuous z-axis scale for 3D plots — scale_z_continuous","text":"","code":"scale_z_continuous(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = scales::censor,   na.value = NA_real_,   transform = \"identity\",   guide = \"none\",   ... )"},{"path":"https://matthewkling.github.io/ggcube/reference/scale_z_continuous.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Continuous z-axis scale for 3D plots — scale_z_continuous","text":"name name scale, used axis title. Use waiver() default, NULL omit title. breaks One : NULL breaks waiver() default breaks numeric vector positions function takes limits input returns breaks output minor_breaks One : NULL minor breaks waiver() default minor breaks numeric vector positions function takes limits input returns minor breaks output n.breaks integer guiding number major breaks. algorithm may choose slightly different number ensure nice break labels. labels One : NULL labels waiver() default labels character vector giving labels (must length breaks) function takes breaks input returns labels output limits numeric vector length two providing limits scale. Use NA refer existing minimum maximum. expand position scales, vector range expansion constants used add padding around data ensure placed distance away axes. oob One : Function handles limits outside scale limits (bounds). scales::censor replacing bounds values NA scales::squish squishing bounds values range na.value Missing values replaced value. transform name transformation object object . Default \"identity\", works standard transform options \"log10\", \"sqrt\", \"reverse\", detailed documentation ggplot2::scale_x_continuous(). guide function used create guide name. Since z-axis guides yet supported, defaults \"none\". ... arguments passed continuous_scale().","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/scale_z_continuous.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Continuous z-axis scale for 3D plots — scale_z_continuous","text":"ggplot2 scale object z aesthetic.","code":""},{"path":[]},{"path":"https://matthewkling.github.io/ggcube/reference/scale_z_continuous.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Continuous z-axis scale for 3D plots — scale_z_continuous","text":"","code":"# Custom breaks, labels, and limits ggplot(mtcars, aes(mpg, wt, z = qsec)) +   geom_point() +   scale_z_continuous(     breaks = c(15, 17, 19, 21),     labels = c(\"Fast\", \"Medium\", \"Slow\", \"Very Slow\"),     limits = c(10, NA)) +   coord_3d()   # Works with standard scale transformations like \"reverse\", \"log10\", etc. ggplot(mtcars, aes(mpg, wt, z = qsec)) +   geom_point() +   scale_z_continuous(transform = \"reverse\") +   coord_3d()"},{"path":"https://matthewkling.github.io/ggcube/reference/scale_z_discrete.html","id":null,"dir":"Reference","previous_headings":"","what":"Discrete z-axis scale for 3D plots — scale_z_discrete","title":"Discrete z-axis scale for 3D plots — scale_z_discrete","text":"scale_z_discrete creates discrete scale z aesthetic 3D plots. works categorical/factor data, positioning level integer coordinates (1, 2, 3, ...) 3D space.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/scale_z_discrete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discrete z-axis scale for 3D plots — scale_z_discrete","text":"","code":"scale_z_discrete(   name = waiver(),   breaks = waiver(),   labels = waiver(),   limits = NULL,   expand = waiver(),   guide = \"none\",   na.translate = TRUE,   na.value = NA_real_,   drop = TRUE,   continuous.limits = NULL,   ... )"},{"path":"https://matthewkling.github.io/ggcube/reference/scale_z_discrete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discrete z-axis scale for 3D plots — scale_z_discrete","text":"name name scale, used axis title. Use waiver() default, NULL omit title. breaks One : NULL breaks waiver() breaks character vector breaks function takes limits input returns breaks output labels One : NULL labels waiver() default labels character vector giving labels (must length breaks) function takes breaks input returns labels output limits character vector defines possible values scale order. expand numeric vector length two giving multiplicative additive expansion constants. constants ensure data placed distance away axes. defaults expand 0.6 units side discrete scales. guide function used create guide name. Since z-axis guides yet supported, defaults \"none\". na.translate Unlike continuous scales, discrete scales can easily show missing values, default. want remove missing values discrete scale, specify na.translate = FALSE. na.value na.translate = TRUE, aesthetic value missing values displayed ? apply position scales NA always placed far right. drop unused factor levels omitted scale? default, TRUE, uses levels appear data; FALSE uses levels factor. ... arguments passed discrete_scale().","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/scale_z_discrete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discrete z-axis scale for 3D plots — scale_z_discrete","text":"ggplot2 scale object z aesthetic.","code":""},{"path":[]},{"path":"https://matthewkling.github.io/ggcube/reference/scale_z_discrete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discrete z-axis scale for 3D plots — scale_z_discrete","text":"","code":"library(ggplot2)  # Basic usage to control order, breaks, labels, expansion, etc. ggplot(mpg, aes(displ, cty, drv, color = drv)) +       geom_point() +       scale_z_discrete(limits = c(\"f\", \"r\", \"4\"), # change default order                        breaks = c(\"f\", \"r\", \"4\"),                        labels = c(\"front\", \"rear\", \"4-wheel\"),                        expand = expansion(.5)) +       coord_3d()"},{"path":"https://matthewkling.github.io/ggcube/reference/sphere_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Sphere surface points — sphere_points","title":"Sphere surface points — sphere_points","text":"toy data set representing points sphere surface, useful testing hull functions","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/sphere_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sphere surface points — sphere_points","text":"","code":"sphere_points"},{"path":[]},{"path":"https://matthewkling.github.io/ggcube/reference/sphere_points.html","id":"sphere-points","dir":"Reference","previous_headings":"","what":"sphere_points","title":"Sphere surface points — sphere_points","text":"data frame 200 rows 3 columns (x, y, z)","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/stat_density_3d.html","id":null,"dir":"Reference","previous_headings":"","what":"3D kernel density estimation surface — stat_density_3d","title":"3D kernel density estimation surface — stat_density_3d","text":"Creates 3D surfaces 2D point data using kernel density estimation. density values become z-coordinates surface, allowing visualization data concentration peaks valleys 3D space.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/stat_density_3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3D kernel density estimation surface — stat_density_3d","text":"","code":"stat_density_3d(   mapping = NULL,   data = NULL,   geom = GeomPolygon3D,   position = \"identity\",   n = NULL,   grid = NULL,   direction = NULL,   h = NULL,   adjust = 1,   pad = 0.1,   min_ndensity = 0,   light = ggcube::light(),   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   ... )"},{"path":"https://matthewkling.github.io/ggcube/reference/stat_density_3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D kernel density estimation surface — stat_density_3d","text":"mapping Set aesthetic mappings created aes(). stat requires x y aesthetics. default, fill mapped after_stat(density) z mapped after_stat(density). data data displayed layer. Must contain x y columns point coordinates. geom geometric object use display data. Defaults GeomPolygon3D proper 3D depth sorting. position Position adjustment, defaults \"identity\". grid, n, direction Arguments passed make_tile_grid() specifying geometry, resolution, orientation surface grid. See ?make_tile_grid() details. h Bandwidth vector. NULL (default), uses automatic bandwidth selection via MASS::bandwidth.nrd(). Can single number (used dimensions) vector length 2 different bandwidths x y directions. adjust Multiplicative bandwidth adjustment factor. Values greater 1 produce smoother surfaces; values less 1 produce detailed surfaces. Default 1. pad Proportional range expansion factor. computed density grid extends proportion raw data range beyond data limit. Default 0.1. min_ndensity Lower cutoff normalized density (computed variable ndensity described ), filter results. particularly useful removing low-density corners rectangular density grids density surfaces shown multiple groups, example . Default 0 (filtering). light lighting specification object created light(), NULL disable shading. na.rm TRUE, removes missing values computing density. FALSE, missing values cause error. Default FALSE. show.legend Logical indicating whether layer included legends. inherit.aes FALSE, overrides default aesthetics. ... arguments passed geom (typically geom_polygon_3d()), sort_method scale_depth well aesthetics like colour, fill, linewidth, etc.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/stat_density_3d.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"3D kernel density estimation surface — stat_density_3d","text":"stat_density_3d() requires following aesthetics input data: x: X coordinate data points y: Y coordinate data points optionally understands: group: Grouping variable computing separate density surfaces Additional aesthetics passed surface styling","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/stat_density_3d.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed variables","title":"3D kernel density estimation surface — stat_density_3d","text":"x, y: Grid coordinates density surface z: density (3D surface height) density: kernel density estimate grid point ndensity: Density estimate scaled maximum 1 within group count: Density estimate × number observations group (expected count) n: Number observations group light: Computed lighting value (numeric methods, hex color normal_rgb) normal_x, normal_y, normal_z: Surface normal components slope: Gradient magnitude surface calculations aspect: Direction steepest slope surface calculations dzdx, dzdy: Partial derivatives surface calculations","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/stat_density_3d.html","id":"grouping","dir":"Reference","previous_headings":"","what":"Grouping","title":"3D kernel density estimation surface — stat_density_3d","text":"aesthetics like colour fill mapped categorical variables, stat_density_3d() computes separate density surfaces group, just like stat_density_2d(). group gets density calculation proper count n values.","code":""},{"path":[]},{"path":"https://matthewkling.github.io/ggcube/reference/stat_density_3d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"3D kernel density estimation surface — stat_density_3d","text":"","code":"library(ggplot2)  # Basic density surface from scattered points p <- ggplot(faithful, aes(eruptions, waiting)) +   coord_3d() +   scale_fill_viridis_c()  p + stat_density_3d() + guides(fill = guide_colorbar_3d())   # Color by alternative density values p + stat_density_3d(aes(fill = after_stat(count)))   # Adjust bandwidth for smoother or more detailed surfaces p + stat_density_3d(adjust = 0.5, color = \"white\")  # More detail  p + stat_density_3d(adjust = 2, color = \"white\")   # Smoother   # Multiple density surfaces by group, # using normalized density to equalize peak heights ggplot(iris, aes(Petal.Length, Sepal.Length, fill = Species)) +   stat_density_3d(aes(z = after_stat(ndensity)),                   color = \"black\", alpha = .7, light = NULL) +   coord_3d()   # Same, but with extra padding to remove edge effects and # with density filtering to remove rectangular artifacts ggplot(iris, aes(Petal.Length, Sepal.Length, fill = Species)) +   stat_density_3d(aes(z = after_stat(ndensity)),                   pad = .3, min_ndensity = .001,                   color = \"black\", alpha = .7, light = NULL) +   coord_3d(ratio = c(3, 3, 1))   # Specify alternative grid geometry and light model p + stat_density_3d(grid = \"hex\", n = 30, direction = \"y\",                     light = light(\"direct\"),                     color = \"white\", linewidth = .1) +   guides(fill = guide_colorbar_3d())"},{"path":"https://matthewkling.github.io/ggcube/reference/stat_function_3d.html","id":null,"dir":"Reference","previous_headings":"","what":"3D function surface visualization — stat_function_3d","title":"3D function surface visualization — stat_function_3d","text":"Creates 3D surfaces evaluating function f(x,y) = z regular grid. function evaluated grid point resulting surface rendered stat_surface_3d().","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/stat_function_3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3D function surface visualization — stat_function_3d","text":"","code":"stat_function_3d(   mapping = NULL,   fun = NULL,   data = NULL,   geom = GeomPolygon3D,   position = \"identity\",   xlim = NULL,   ylim = NULL,   n = NULL,   grid = NULL,   direction = NULL,   light = ggcube::light(),   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   color = NULL,   colour = NULL,   ... )"},{"path":"https://matthewkling.github.io/ggcube/reference/stat_function_3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D function surface visualization — stat_function_3d","text":"mapping Set aesthetic mappings created aes(). Since stat generates data, typically used additional aesthetics like fill color based computed variables. Fill mapped after_stat(z) default. fun Function evaluate. Must accept two arguments (vectors corresponding x y axis values) return numeric vector z values. Required parameter. data data displayed layer. Usually needed since stat generates data function. geom geometric object use display data. Defaults GeomPolygon3D proper 3D depth sorting. position Position adjustment, defaults \"identity\". collapse result onto one 2D surface, use position_on_face(). xlim, ylim Numeric vectors length 2 giving range x y values. NULL (default), uses scale ranges plot, can set via xlim() ylim(), trained supplying data plot. grid, n, direction Arguments passed make_tile_grid() specifying geometry, resolution, orientation surface grid. See ?make_tile_grid() details. light lighting specification object created light(), NULL disable shading. na.rm TRUE, removes missing values function evaluation results. FALSE, missing values cause error. Default FALSE. show.legend Logical indicating whether layer included legends. inherit.aes FALSE, overrides default aesthetics. ... arguments passed geom (typically geom_polygon_3d()), sort_method scale_depth well aesthetics like colour, fill, linewidth, etc.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/stat_function_3d.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"3D function surface visualization — stat_function_3d","text":"stat_function_3d() generates x, y, z coordinates, typically positional aesthetics needed mapping. However, can use computed variables after_stat():","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/stat_function_3d.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed variables","title":"3D function surface visualization — stat_function_3d","text":"x, y, z: Grid coordinates function values light: Computed lighting value (numeric methods, hex color normal_rgb) normal_x, normal_y, normal_z: Surface normal components slope: Gradient magnitude surface calculations aspect: Direction steepest slope surface calculations dzdx, dzdy: Partial derivatives surface calculations","code":""},{"path":[]},{"path":"https://matthewkling.github.io/ggcube/reference/stat_function_3d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"3D function surface visualization — stat_function_3d","text":"","code":"library(ggplot2)  # Basic function surface ggplot() +   stat_function_3d(fun = function(a, b) exp(-(a^2 + b^2)),                    xlim = c(-2, 2), ylim = c(-2, 2),                    light = NULL, color = \"white\") +   coord_3d() +   scale_fill_viridis_c()   # Wave function with lighting wave_fun <- function(x, y) cos(x) + cos(y) + cos(x+y) + cos(sqrt(x^2 + y^2)) ggplot() +   stat_function_3d(fun = wave_fun, fill = \"steelblue\",                    xlim = c(-3*pi, 3*pi), ylim = c(-3*pi, 3*pi),                    light = light(method = \"direct\", mode = \"hsl\",                           contrast = .8, direction = c(1, 0, 1))) +   coord_3d(scales = \"fixed\") + theme_dark()   # Use after_stat to access computed surface-orientation variables ggplot() +   stat_function_3d(aes(fill = after_stat(dzdx),                        color = after_stat(dzdx)),                    fun = function(x, y) sin(x) * cos(y),                    xlim = c(-pi, pi), ylim = c(-pi, pi),                    n = 60, light = NULL) +   scale_fill_viridis_c(option = \"B\") +   scale_color_viridis_c(option = \"B\") +   coord_3d(scales = \"fixed\") #> Error in stat_function_3d(aes(fill = after_stat(dzdx), color = after_stat(dzdx)),     fun = function(x, y) sin(x) * cos(y), xlim = c(-pi, pi),     ylim = c(-pi, pi), n = 60, light = NULL): Problem while mapping stat to aesthetics. #> ℹ Error occurred in the 1st layer. #> Caused by error: #> ! object 'dzdx' not found  # Use \"filtering\" functions to constrain output domain ggplot() +   stat_function_3d(fun = function(a, b) {     ifelse(sqrt(a^2 + b^2) < 2, exp(-(a^2 + b^2)), NA)},     xlim = c(-2, 2), ylim = c(-2, 2), color = \"white\") +   coord_3d() +   scale_fill_viridis_c() +   guides(fill = guide_colorbar_3d()) #> Warning: Removed 1348 rows containing missing values or values outside the scale range #> (`geom_polygon3d()`).   # Specify alternative grid geometry ggplot() +   stat_function_3d(fun = function(a, b) exp(-(a^2 + b^2)),     xlim = c(-2, 2), ylim = c(-2, 2), color = \"white\",     grid = \"tri\", n = 30, direction = \"y\") +   coord_3d() +   scale_fill_viridis_c() +   guides(fill = guide_colorbar_3d())"},{"path":"https://matthewkling.github.io/ggcube/reference/stat_hull_3d.html","id":null,"dir":"Reference","previous_headings":"","what":"Create 3D convex and alpha hulls with lighting — stat_hull_3d","title":"Create 3D convex and alpha hulls with lighting — stat_hull_3d","text":"stat_hull_3d() turns 3D point clouds surface hulls consisting triangular polygons, using either convex hull alpha shape algorithms. computes surface normals applies various lighting models create realistic 3D surface visualizations.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/stat_hull_3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create 3D convex and alpha hulls with lighting — stat_hull_3d","text":"","code":"stat_hull_3d(   mapping = NULL,   data = NULL,   geom = GeomPolygon3D,   position = \"identity\",   method = \"convex\",   radius = NULL,   light = ggcube::light(),   inherit.aes = TRUE,   ... )"},{"path":"https://matthewkling.github.io/ggcube/reference/stat_hull_3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create 3D convex and alpha hulls with lighting — stat_hull_3d","text":"mapping Set aesthetic mappings created aes(). required aesthetics x, y, z. Additional aesthetics can use computed variables after_stat(). data data displayed layer. geom geometric object use display data. Defaults GeomPolygon3D proper 3D depth sorting. position Position adjustment, defaults \"identity\". method Triangulation method. Either: \"convex\": Convex hull triangulation (default) \"alpha\": Alpha shape triangulation (can capture non-convex topologies) radius Square root \"alpha\" parameter alpha method used. face included resulting alpha shape can \"exposed\" sphere radius. NULL (default), simple heuristic based data scale used calculate radius value. Note alpha shapes quite sensitive coordinate scales data. See Details section. light lighting specification object created light(), NULL disable shading. inherit.aes FALSE, overrides default aesthetics. ... arguments passed geom (typically geom_polygon_3d()), sort_method scale_depth well aesthetics like colour, fill, linewidth, etc.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/stat_hull_3d.html","id":"grouping","dir":"Reference","previous_headings":"","what":"Grouping","title":"Create 3D convex and alpha hulls with lighting — stat_hull_3d","text":"stat_hull_3d() respects ggplot2 grouping aesthetics. create separate hulls different subsets data, use aes(group = category_variable) similar grouping aesthetics. group get independent hull calculation.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/stat_hull_3d.html","id":"alpha-scale-sensitivity","dir":"Reference","previous_headings":"","what":"Alpha scale sensitivity","title":"Create 3D convex and alpha hulls with lighting — stat_hull_3d","text":"Alpha shape method highly sensitive coordinate scales. alpha parameter works data scaled 0-1 likely fail data scaled 0-1000. Guidelines choosing radius: Start alpha = 1.0 adjust based results data mixed scales (e.g., x: 0-1, y: 0-1000), consider rescaling data first Larger alpha values → smoother, connected surfaces Smaller alpha values → detailed surfaces, may fragment get triangles, try increasing alpha 10x surface fills unwanted holes, try decreasing alpha 10x Example scale effects:","code":"# These require very different alpha values: data_small <- data.frame(x = runif(100, 0, 1), y = runif(100, 0, 1), z = runif(100, 0, 1)) data_large <- data.frame(x = runif(100, 0, 100), y = runif(100, 0, 100), z = runif(100, 0, 100))  stat_hull_3d(data = data_small, alpha = 0.5)    # Might work well stat_hull_3d(data = data_large, alpha = 50)     # Might need much larger alpha"},{"path":"https://matthewkling.github.io/ggcube/reference/stat_hull_3d.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed variables","title":"Create 3D convex and alpha hulls with lighting — stat_hull_3d","text":"light: Computed lighting value (numeric methods, hex color normal_rgb) normal_x, normal_y, normal_z: Surface normal components triangle_index: Sequential triangle number (useful debugging) face_id: Triangle group identifier","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/stat_hull_3d.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Create 3D convex and alpha hulls with lighting — stat_hull_3d","text":"stat_hull_3d() requires following aesthetics: x: X coordinate y: Y coordinate z: Z coordinate Computed variables can accessed using after_stat(): after_stat(light): Lighting values after_stat(normal_x): X component surface normal after_stat(normal_y): Y component surface normal after_stat(normal_z): Z component surface normal","code":""},{"path":[]},{"path":"https://matthewkling.github.io/ggcube/reference/stat_hull_3d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create 3D convex and alpha hulls with lighting — stat_hull_3d","text":"","code":"# Convex hull ggplot(sphere_points, aes(x, y, z)) +   stat_hull_3d(method = \"convex\", fill = \"gray40\") +   coord_3d()   # Alpha shape (for sphere data, gives similar result to convex) ggplot(sphere_points, aes(x, y, z)) +   stat_hull_3d(method = \"alpha\", radius = 2, fill = \"gray40\") +   coord_3d()   # Use grouping to build separate hulls for data subsets ggplot(iris, aes(Petal.Length, Sepal.Length, Sepal.Width,                  color = Species, fill = Species)) +       stat_hull_3d() +       coord_3d(scales = \"fixed\")"},{"path":"https://matthewkling.github.io/ggcube/reference/stat_identity_3d.html","id":null,"dir":"Reference","previous_headings":"","what":"3D-aware identity transformation — stat_identity_3d","title":"3D-aware identity transformation — stat_identity_3d","text":"stat performs identity transformation (passes data unchanged) properly handling discrete scales lighting specifications 3D coordinate systems. also converts group values hierarchical format prevent reordering withing groups depth sorting.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/stat_identity_3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3D-aware identity transformation — stat_identity_3d","text":"","code":"stat_identity_3d(   mapping = NULL,   data = NULL,   geom = \"point\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   light = NULL,   ... )"},{"path":"https://matthewkling.github.io/ggcube/reference/stat_identity_3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D-aware identity transformation — stat_identity_3d","text":"mapping Set aesthetic mappings created aes(). data data displayed layer. geom geometric object use display data. position Position adjustment, defaults \"identity\". na.rm FALSE, missing values removed warning. show.legend Logical indicating whether layer included legends. inherit.aes FALSE, overrides default aesthetics. light lighting specification object created light(), NULL (default) disable shading. ... arguments passed geom layer.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/stat_identity_3d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"3D-aware identity transformation — stat_identity_3d","text":"stat primarily intended use 3D geoms need discrete scale lighting support, following pattern ggcube stats.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/stat_identity_3d.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed variables","title":"3D-aware identity transformation — stat_identity_3d","text":"x_raw, y_raw, z_raw: Original values discrete--numeric conversion group: Converted hierarchical format (e.g., \"1__group\", \"2__group\") proper depth sorting.","code":""},{"path":[]},{"path":"https://matthewkling.github.io/ggcube/reference/stat_path_3d.html","id":null,"dir":"Reference","previous_headings":"","what":"3D path statistical transformation — stat_path_3d","title":"3D path statistical transformation — stat_path_3d","text":"stat_path_3d() converts path data (connected points) segment data proper 3D depth sorting. consecutive pair points path becomes separate segment can depth-sorted independently.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/stat_path_3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3D path statistical transformation — stat_path_3d","text":"","code":"stat_path_3d(   mapping = NULL,   data = NULL,   geom = GeomSegment3D,   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   ... )"},{"path":"https://matthewkling.github.io/ggcube/reference/stat_path_3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D path statistical transformation — stat_path_3d","text":"mapping Set aesthetic mappings created aes(). data data displayed layer. geom geometric object use display data. Defaults GeomSegment3D. position Position adjustment, defaults \"identity\". na.rm FALSE, missing values removed warning. show.legend Logical indicating whether layer included legends. inherit.aes FALSE, overrides default aesthetics. ... arguments passed layer().","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/stat_path_3d.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed variables","title":"3D path statistical transformation — stat_path_3d","text":"x, y, z: Start coordinates segment xend, yend, zend: End coordinates segment group: Hierarchical group identifier preserving original grouping","code":""},{"path":[]},{"path":"https://matthewkling.github.io/ggcube/reference/stat_pillar_3d.html","id":null,"dir":"Reference","previous_headings":"","what":"3D pillar visualization from grid data — stat_pillar_3d","title":"3D pillar visualization from grid data — stat_pillar_3d","text":"Creates 3D pillar visualizations grid data (regular sparse). data point becomes rectangular 3D column extending base level data value. Perfect 3D bar charts, architectural visualization, terrain layers. Works complete regular grids sparse point data.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/stat_pillar_3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3D pillar visualization from grid data — stat_pillar_3d","text":"","code":"stat_pillar_3d(   mapping = NULL,   data = NULL,   geom = GeomPolygon3D,   position = \"identity\",   width = 1,   faces = \"all\",   light = ggcube::light(),   zmin = NULL,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   ... )"},{"path":"https://matthewkling.github.io/ggcube/reference/stat_pillar_3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D pillar visualization from grid data — stat_pillar_3d","text":"mapping Set aesthetic mappings created aes(). data data displayed layer. geom geometric object use display data. Defaults GeomPolygon3D proper 3D depth sorting. position Position adjustment, defaults \"identity\". width Numeric value controlling pillar width fraction grid spacing. Default 1.0 (pillars touch ). Use 0.8 small gaps, 1.2 overlap. Grid spacing determined automatically using resolution(). faces Character vector specifying faces render. Options: \"\" (default): Render 6 faces \"none\": Render faces Vector face names: c(\"zmax\", \"xmin\", \"ymax\"), etc. Valid face names: \"xmin\", \"xmax\", \"ymin\", \"ymax\", \"zmin\", \"zmax\". light lighting specification object created light(), NULL disable shading. zmin Base level pillars. provided parameter, overrides zmin aesthetic mapping. NULL (default), uses zmin aesthetic mapped, otherwise defaults minimum z value data. na.rm FALSE, missing values removed warning. show.legend Logical indicating whether layer included legends. inherit.aes FALSE, overrides default aesthetics. ... arguments passed geom (typically geom_polygon_3d()), sort_method scale_depth well aesthetics like colour, fill, linewidth, etc. Note pillar geometries often require pairwise depth sorting correct rendering. default smaller data sets, larger data sets due compute speed; cases may wish manually specify sort_method = \"pairwise\".","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/stat_pillar_3d.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"3D pillar visualization from grid data — stat_pillar_3d","text":"stat_pillar_3d() requires following aesthetics: x: X coordinate (grid position) y: Y coordinate (grid position) z: Z coordinate (pillar top height) optionally understands: zmin: Base level pillar (can overridden zmin parameter)","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/stat_pillar_3d.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed variables","title":"3D pillar visualization from grid data — stat_pillar_3d","text":"light: Computed lighting value (numeric methods, hex color normal_rgb) normal_x, normal_y, normal_z: Face normal components group: Hierarchical group identifier format \"pillarX__face_type\" proper depth sorting pillar_id: Sequential pillar number face_type: Face name (\"zmax\", \"xmin\", etc.)","code":""},{"path":[]},{"path":"https://matthewkling.github.io/ggcube/reference/stat_pillar_3d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"3D pillar visualization from grid data — stat_pillar_3d","text":"","code":"# Basic 3D bar chart from regular grid d <- expand.grid(x = 1:5, y = 1:5) d$z <- d$x + d$y + rnorm(25, 0, 0.5)  ggplot(d, aes(x, y, z)) +   stat_pillar_3d(aes(fill = after_stat(light))) +   coord_3d() #> Error in stat_pillar_3d(aes(fill = after_stat(light))): Problem while mapping stat to aesthetics. #> ℹ Error occurred in the 1st layer. #> Caused by error in `map_statistic()`: #> ! Aesthetics must be valid computed stats. #> ✖ The following aesthetics are invalid: #> ✖ `fill = after_stat(light)` #> ℹ Did you map your stat in the wrong layer?  # Sparse data (only some points) sparse_data <- data.frame(   x = c(1, 3, 2, 4, 1),   y = c(1, 2, 3, 1, 4),   z = c(2, 5, 3, 4, 6) ) ggplot(sparse_data, aes(x, y, z)) +   stat_pillar_3d(aes(fill = z), color = \"white\") +   coord_3d()   # Set base level for all pillars using parameter ggplot(sparse_data, aes(x, y, z)) +   stat_pillar_3d(aes(fill = z), color = \"white\",                 zmin = 0) +   coord_3d()   # Variable base levels using aesthetic d$base_level <- runif(nrow(d), -1, 1) ggplot(d, aes(x, y, z = z, zmin = base_level)) +   stat_pillar_3d(aes(fill = after_stat(light))) +   coord_3d() #> Error in stat_pillar_3d(aes(fill = after_stat(light))): Problem while mapping stat to aesthetics. #> ℹ Error occurred in the 1st layer. #> Caused by error in `map_statistic()`: #> ! Aesthetics must be valid computed stats. #> ✖ The following aesthetics are invalid: #> ✖ `fill = after_stat(light)` #> ℹ Did you map your stat in the wrong layer?  # Show only top and front faces ggplot(sparse_data, aes(x, y, z)) +   stat_pillar_3d(aes(fill = after_stat(light)),               faces = c(\"zmax\", \"ymin\")) +   coord_3d() #> Error in stat_pillar_3d(aes(fill = after_stat(light)), faces = c(\"zmax\",     \"ymin\")): Problem while mapping stat to aesthetics. #> ℹ Error occurred in the 1st layer. #> Caused by error in `map_statistic()`: #> ! Aesthetics must be valid computed stats. #> ✖ The following aesthetics are invalid: #> ✖ `fill = after_stat(light)` #> ℹ Did you map your stat in the wrong layer?  # With gaps between pillars ggplot(d, aes(x, y, z)) +   stat_pillar_3d(color = \"black\", width = 0.6) +   coord_3d()"},{"path":"https://matthewkling.github.io/ggcube/reference/stat_point_3d.html","id":null,"dir":"Reference","previous_headings":"","what":"3D-aware point transformation with reference lines and points — stat_point_3d","title":"3D-aware point transformation with reference lines and points — stat_point_3d","text":"stat performs identity transformation (passes data unchanged) properly handling discrete scales 3D coordinate systems. can optionally generate reference lines points projecting cube faces.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/stat_point_3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3D-aware point transformation with reference lines and points — stat_point_3d","text":"","code":"stat_point_3d(   mapping = NULL,   data = NULL,   geom = \"point_3d\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   raw_points = TRUE,   ref_lines = FALSE,   ref_points = \"circles\",   ref_faces = \"zmin\",   ref_circle_radius = 0.02,   ref_circle_vertices = 16,   ... )"},{"path":"https://matthewkling.github.io/ggcube/reference/stat_point_3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D-aware point transformation with reference lines and points — stat_point_3d","text":"mapping Set aesthetic mappings created aes(). stat requires x, y, z aesthetics. data data displayed layer. geom geometric object use display data. position Position adjustment, defaults \"identity\". na.rm FALSE, missing values removed warning. show.legend Logical indicating whether layer included legends. inherit.aes FALSE, overrides default aesthetics. raw_points Logical indicating whether show primary 3D points. ref_lines Logical indicating whether show reference lines faces. ref_points Type reference points create. Options: FALSE: reference points \"circles\": Circular reference points project properly (default) \"points\": Single-point references (legacy behavior) ref_faces Character vector specifying faces project . Uses vocabulary coord_3d panels argument. Default \"zmin\" uses bottom face. ref_circle_radius Radius circular reference points standardized coordinate units. ref_circle_vertices Number vertices circular reference points (higher = smoother). ... arguments passed layer().","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/stat_point_3d.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed variables","title":"3D-aware point transformation with reference lines and points — stat_point_3d","text":"x_raw, y_raw, z_raw: Original values discrete--numeric conversion element_type: Type element (\"raw_point\", \"ref_point\", \"ref_line\", \"ref_circle\") segment_id: ID linking two endpoints reference lines ref_face: face reference elements project ref_circle_radius: Radius circular reference points ref_circle_vertices: Number vertices circular reference points","code":""},{"path":[]},{"path":"https://matthewkling.github.io/ggcube/reference/stat_segment_3d.html","id":null,"dir":"Reference","previous_headings":"","what":"3D segment statistical transformation — stat_segment_3d","title":"3D segment statistical transformation — stat_segment_3d","text":"stat_segment_3d() provides 3D-aware processing segment data, primarily handling discrete scale conversion preserving segment structure.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/stat_segment_3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3D segment statistical transformation — stat_segment_3d","text":"","code":"stat_segment_3d(   mapping = NULL,   data = NULL,   geom = GeomSegment3D,   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   ... )"},{"path":"https://matthewkling.github.io/ggcube/reference/stat_segment_3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D segment statistical transformation — stat_segment_3d","text":"mapping Set aesthetic mappings created aes(). data data displayed layer. geom geometric object use display data. Defaults GeomSegment3D. position Position adjustment, defaults \"identity\". na.rm FALSE, missing values removed warning. show.legend Logical indicating whether layer included legends. inherit.aes FALSE, overrides default aesthetics. ... arguments passed layer().","code":""},{"path":[]},{"path":"https://matthewkling.github.io/ggcube/reference/stat_smooth_3d.html","id":null,"dir":"Reference","previous_headings":"","what":"3D smooth surface from scattered data — stat_smooth_3d","title":"3D smooth surface from scattered data — stat_smooth_3d","text":"Creates 3D surfaces fitting smooth models scattered (x,y,z) data points. fitted model evaluated regular grid rendered 3D surface optional standard error surfaces lighting effects.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/stat_smooth_3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3D smooth surface from scattered data — stat_smooth_3d","text":"","code":"stat_smooth_3d(   mapping = NULL,   data = NULL,   geom = GeomSmooth3D,   position = \"identity\",   method = \"loess\",   formula = NULL,   method.args = list(),   xlim = NULL,   ylim = NULL,   n = NULL,   grid = NULL,   direction = NULL,   domain = c(\"bbox\", \"chull\"),   se = FALSE,   level = 0.95,   se.fill = NULL,   se.colour = NULL,   se.color = NULL,   se.alpha = 0.5,   se.linewidth = NULL,   light = NULL,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   ... )"},{"path":"https://matthewkling.github.io/ggcube/reference/stat_smooth_3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D smooth surface from scattered data — stat_smooth_3d","text":"mapping Set aesthetic mappings created aes(). stat requires x, y, z aesthetics input data. default, fill mapped after_stat(fitted). data data displayed layer. Must contain x, y, z columns. geom geometric object use display data. Defaults GeomPolygon3D proper 3D depth sorting. position Position adjustment, defaults \"identity\". method Smoothing method use. Currently supported: \"loess\" (default): Local polynomial regression \"lm\": Linear model \"glm\": Generalized linear model \"gam\": Generalized additive model (requires mgcv package) formula Model formula. NULL (default), uses method-appropriate defaults: z ~ x + y lm glm, z ~ s(x) + s(y) gam, auto loess. method.args List additional arguments passed fitting function. loess, might include span degree. lm, might include weights. glm, might include family (defaults gaussian()). gam, might include smoothing parameters basis specifications. xlim, ylim Numeric vectors length 2 giving range prediction grid. NULL (default), uses exact data range extrapolation, following geom_smooth() conventions. grid, n, direction Arguments passed make_tile_grid() specifying geometry, resolution, orientation surface grid. See ?make_tile_grid() details. domain Character indicating x-y domain visualize surface. default, \"bbox\", shows predictions full rectangular bounding box predictors.alternative, \"chull\", shows predictions within convex hull input data, prevents extrapolation unoccupied corners predictor space. se Logical indicating whether display confidence interval bands around smooth; TRUE, rendered additional surfaces; inherit aesthetics primary smooth layer unless otherwise specified. Defaults FALSE. level Level confidence interval use (0.95 default). se.fill Fill colour confidence interval bands. NULL, inherits main surface fill aesthetic. se.colour, se.color Colour confidence interval band borders. NULL, inherits main surface colour aesthetic. se.alpha Alpha transparency confidence interval bands. Defaults 0.5. se.linewidth Line width confidence interval band borders. NULL, inherits main surface linewidth aesthetic. light lighting specification object created light(), NULL disable shading. na.rm TRUE, removes missing values fitting model. FALSE, missing values cause error. Default FALSE. show.legend Logical indicating whether layer included legends. inherit.aes FALSE, overrides default aesthetics. ... arguments passed geom (typically geom_smooth_3d()), sort_method scale_depth well aesthetics like colour, fill, linewidth, etc.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/stat_smooth_3d.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"3D smooth surface from scattered data — stat_smooth_3d","text":"stat_smooth_3d() requires following aesthetics input data: x: X coordinate y: Y coordinate z: Z coordinate (response variable smoothed)","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/stat_smooth_3d.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed variables","title":"3D smooth surface from scattered data — stat_smooth_3d","text":"x, y, z: Grid coordinates smoothed predictions fitted: Smoothed predictions (z level == \"fitted\") se: Standard errors fitted values (available se = TRUE) level: Type surface (\"fitted\", \"upper CI\", \"lower CI\" confidence bands) light: Computed lighting value (numeric methods, hex color normal_rgb) normal_x, normal_y, normal_z: Surface normal components slope: Gradient magnitude surface calculations aspect: Direction steepest slope surface calculations dzdx, dzdy: Partial derivatives surface calculations","code":""},{"path":[]},{"path":"https://matthewkling.github.io/ggcube/reference/stat_smooth_3d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"3D smooth surface from scattered data — stat_smooth_3d","text":"","code":"library(ggplot2)  # Generate scattered 3D data set.seed(123) d <- data.frame(   x = runif(100, -1, 3),   y = runif(100, -3, 3) ) d$z <- abs(1 + d$x^2 - d$y^2 + rnorm(100, 0, 1))  # Base plot p <- ggplot(d, aes(x, y, z)) + coord_3d()  # Basic smooth surface with default loess model p + stat_smooth_3d() #> Warning: Removed 1521 rows containing missing values or values outside the scale range #> (`geom_smooth3d()`).   # Linear model surface with 90% confidence intervals p + stat_smooth_3d(method = \"lm\", color = \"black\", se = TRUE,                    level = 0.9, se.alpha = .8) #> Warning: Removed 4563 rows containing missing values or values outside the scale range #> (`geom_smooth3d()`).   # Linear model surface with custom model formula p + stat_smooth_3d(method = \"lm\",        formula = z ~ poly(x, 2) + poly(y, 2) + x:y) #> Warning: Removed 1521 rows containing missing values or values outside the scale range #> (`geom_smooth3d()`).   # Loess with custom span parameter, and lighting aesthetics p + stat_smooth_3d(       method = \"loess\", method.args = list(span = 0.3),       fill = \"steelblue\", color = \"white\",       light = light(direction = c(-1, 0, 0))) #> Warning: Removed 1521 rows containing missing values or values outside the scale range #> (`geom_smooth3d()`).   # GLM with gamma family and log link p + stat_smooth_3d(       method = \"glm\",       method.args = list(family = Gamma(link = \"log\")),       formula = z ~ poly(x, 2) + poly(y, 2)) +   scale_fill_viridis_c() #> Warning: Removed 1521 rows containing missing values or values outside the scale range #> (`geom_smooth3d()`).   # GAM with default smoothers, with fill colored by confidence interval p + stat_smooth_3d(aes(fill = after_stat(level)),                    method = \"gam\", se = TRUE, color = \"black\") +   scale_fill_manual(values = c(\"red\", \"darkorchid4\", \"steelblue\")) #> Warning: Removed 4563 rows containing missing values or values outside the scale range #> (`geom_smooth3d()`).   # Visualize uncertainty with computed \"standard error\" variable p + stat_smooth_3d(aes(fill = after_stat(se * 2))) +   scale_fill_viridis_c() #> Warning: Removed 1521 rows containing missing values or values outside the scale range #> (`geom_smooth3d()`).   # Extend surface beyond training data range (explicit extrapolation) p + stat_smooth_3d(method = \"lm\", xlim = c(-5, 5), ylim = c(-5, 5)) #> Warning: Removed 1521 rows containing missing values or values outside the scale range #> (`geom_smooth3d()`).  # Clip surface to predictor convex hull # to prevent extrapolation into corner areas p + stat_smooth_3d(method = \"lm\", domain = \"chull\") #> Warning: Removed 1335 rows containing missing values or values outside the scale range #> (`geom_smooth3d()`).   # Specify alternative grid geometry p + stat_smooth_3d(grid = \"hex\", n = 30, direction = \"y\") #> Warning: Removed 780 rows containing missing values or values outside the scale range #> (`geom_smooth3d()`)."},{"path":"https://matthewkling.github.io/ggcube/reference/stat_surface_3d.html","id":null,"dir":"Reference","previous_headings":"","what":"3D surface from regular grid data — stat_surface_3d","title":"3D surface from regular grid data — stat_surface_3d","text":"Creates 3D surfaces regularly gridded data (like elevation maps). data must regular, complete grid every combination x y values appears exactly .","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/stat_surface_3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3D surface from regular grid data — stat_surface_3d","text":"","code":"stat_surface_3d(   mapping = NULL,   data = NULL,   geom = GeomPolygon3D,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   light = ggcube::light() )"},{"path":"https://matthewkling.github.io/ggcube/reference/stat_surface_3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D surface from regular grid data — stat_surface_3d","text":"mapping Set aesthetic mappings created aes(). stat requires x, y, z aesthetics. data data displayed layer. Must contain x, y, z columns representing coordinates regular grid. geom geometric object use display data. Defaults GeomPolygon3D proper 3D depth sorting. position Position adjustment, defaults \"identity\". ... arguments passed geom (typically geom_polygon_3d()), sort_method scale_depth well aesthetics like colour, fill, linewidth, etc. na.rm FALSE, missing values removed warning. show.legend Logical indicating whether layer included legends. inherit.aes FALSE, overrides default aesthetics. light lighting specification object created light(), NULL disable shading.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/stat_surface_3d.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"3D surface from regular grid data — stat_surface_3d","text":"stat_surface_3d() requires following aesthetics: x: X coordinate y: Y coordinate z: Z coordinate (elevation/height)","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/stat_surface_3d.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed variables","title":"3D surface from regular grid data — stat_surface_3d","text":"slope: Gradient magnitude surface calculations aspect: Direction steepest slope surface calculations dzdx, dzdy: Partial derivatives surface calculations","code":""},{"path":[]},{"path":"https://matthewkling.github.io/ggcube/reference/stat_surface_3d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"3D surface from regular grid data — stat_surface_3d","text":"","code":"# data and base plot for basic surface d <- dplyr::mutate(tidyr::expand_grid(x = -20:20, y = -20:20),       z = sqrt(x^2 + y^2) / 1.5,       z = cos(z) - z) p <- ggplot(d, aes(x, y, z)) + coord_3d()  # surface with 3d lighting p + stat_surface_3d(fill = \"steelblue\", color = \"steelblue\", linewidth = .2,       light = light(mode = \"hsl\", direction = c(1, 0, 0)))   # mesh wireframe, without fill, with aes line color p + stat_surface_3d(aes(color = z), fill = NA)   # use after_stat to access computed surface-orientation variables p + stat_surface_3d(aes(fill = after_stat(aspect))) +       scale_fill_gradientn(colors = rainbow(20))   # use `group` to plot data for multiple surfaces d <- expand.grid(x = -5:5, y = -5:5) d$z <- d$x^2 - d$y^2 d$g <- \"a\" d2 <- d d2$z <- d$z + 15 d2$g <- \"b\" ggplot(rbind(d, d2), aes(x, y, z, group = g, fill = g)) +   coord_3d() +   stat_surface_3d(color = \"black\", alpha = .5, light = NULL)   # terrain surface with topographic hillshade and elevational fill ggplot(mountain, aes(x, y, z, fill = z, color = z)) +   stat_surface_3d(light = light(direction = c(1, 0, .5),                            mode = \"hsv\", contrast = 1.5),                linewidth = .2) +   coord_3d(ratio = c(1, 1.5, .75)) +   theme_light() +   scale_fill_gradientn(colors = c(\"darkgreen\", \"rosybrown4\", \"gray60\")) +   scale_color_gradientn(colors = c(\"darkgreen\", \"rosybrown4\", \"gray60\")) +   guides(fill = guide_colorbar_3d())"},{"path":"https://matthewkling.github.io/ggcube/reference/stat_voxel_3d.html","id":null,"dir":"Reference","previous_headings":"","what":"3D voxel visualization from sparse 3D data — stat_voxel_3d","title":"3D voxel visualization from sparse 3D data — stat_voxel_3d","text":"Creates 3D voxel visualizations sparse 3D point data. data point becomes fixed-size cube centered coordinates. Useful volumetric data 3D pixel art.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/stat_voxel_3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3D voxel visualization from sparse 3D data — stat_voxel_3d","text":"","code":"stat_voxel_3d(   mapping = NULL,   data = NULL,   geom = GeomPolygon3D,   position = \"identity\",   width = 1,   faces = \"all\",   light = ggcube::light(),   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   ... )"},{"path":"https://matthewkling.github.io/ggcube/reference/stat_voxel_3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D voxel visualization from sparse 3D data — stat_voxel_3d","text":"mapping Set aesthetic mappings created aes(). data data displayed layer. geom geometric object use display data. Defaults GeomPolygon3D proper 3D depth sorting. position Position adjustment, defaults \"identity\". width Numeric value controlling voxel size fraction grid spacing. Default 1.0 (voxels touch ). Use 0.8 small gaps, 1.2 overlap. Grid spacing determined automatically using resolution() dimension. faces Character vector specifying faces render. Options: \"\" (default): Render 6 faces \"none\": Render faces Vector face names: c(\"zmax\", \"xmin\", \"ymax\"), etc. Valid face names: \"xmin\", \"xmax\", \"ymin\", \"ymax\", \"zmin\", \"zmax\". light lighting specification object created light(), NULL disable shading. na.rm FALSE, missing values removed warning. show.legend Logical indicating whether layer included legends. inherit.aes FALSE, overrides default aesthetics. ... arguments passed geom (typically geom_polygon_3d()), sort_method scale_depth well aesthetics like colour, fill, linewidth, etc. Note voxel geometries sometimes require pairwise depth sorting correct rendering. default smaller data sets, larger data sets due compute speed; cases may wish manually specify sort_method = \"pairwise\".","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/stat_voxel_3d.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"3D voxel visualization from sparse 3D data — stat_voxel_3d","text":"stat_voxel_3d() requires following aesthetics: x: X coordinate (voxel center position) y: Y coordinate (voxel center position) z: Z coordinate (voxel center position) understands additional aesthetics: fill: Voxel fill color colour: Voxel border color alpha: Voxel transparency","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/stat_voxel_3d.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed variables","title":"3D voxel visualization from sparse 3D data — stat_voxel_3d","text":"light: Computed lighting value (numeric methods, hex color normal_rgb) normal_x, normal_y, normal_z: Face normal components group: Hierarchical group identifier format \"voxel_XXXX__face_type\" proper depth sorting voxel_id: Sequential voxel number face_type: Face name (\"zmax\", \"xmin\", etc.)","code":""},{"path":[]},{"path":"https://matthewkling.github.io/ggcube/reference/stat_voxel_3d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"3D voxel visualization from sparse 3D data — stat_voxel_3d","text":"","code":"# Sparse 3D voxel data voxel_data <- data.frame(   x = round(rnorm(100, 0, 2)),   y = round(rnorm(100, 0, 2)),   z = round(rnorm(100, 0, 2)) )  p <- ggplot(voxel_data, aes(x, y, z)) + coord_3d()  # Basic 3D voxel plot p + stat_voxel_3d(fill = \"steelblue\")   # With aesthetic fill p + stat_voxel_3d(aes(fill = z)) +   scale_fill_viridis_c() + guides(fill = guide_colorbar_3d())   # Show only visible faces for performance p + stat_voxel_3d(faces = c(\"zmax\", \"ymin\", \"xmin\"))"},{"path":"https://matthewkling.github.io/ggcube/reference/transform_3d_standard.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform 3D points using rotation and optional perspective with viewpoint distance — transform_3d_standard","title":"Transform 3D points using rotation and optional perspective with viewpoint distance — transform_3d_standard","text":"Transform 3D points using rotation optional perspective viewpoint distance","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/transform_3d_standard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform 3D points using rotation and optional perspective with viewpoint distance — transform_3d_standard","text":"","code":"transform_3d_standard(   data,   proj = list(pitch = 0, roll = 0, yaw = 0, persp = TRUE, dist = 2) )"},{"path":"https://matthewkling.github.io/ggcube/reference/transform_3d_standard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform 3D points using rotation and optional perspective with viewpoint distance — transform_3d_standard","text":"data Data frame x, y, z columns (standard -0.5, 0.5 domain) proj list projection parameters","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/transform_3d_standard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform 3D points using rotation and optional perspective with viewpoint distance — transform_3d_standard","text":"Data frame transformed coordinates, depth sorting, depth_scale size scaling","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/translate_face_names_from_flips.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate face names using stored flip information — translate_face_names_from_flips","title":"Translate face names using stored flip information — translate_face_names_from_flips","text":"Translate face names using stored flip information Translate face names account scale direction flips","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/translate_face_names_from_flips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate face names using stored flip information — translate_face_names_from_flips","text":"","code":"translate_face_names_from_flips(face_names, scale_flips)  translate_face_names_from_flips(face_names, scale_flips)"},{"path":"https://matthewkling.github.io/ggcube/reference/translate_face_names_from_flips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate face names using stored flip information — translate_face_names_from_flips","text":"face_names Character vector face names faces Character vector face names flips List x, y, z flip indicators scale_x, scale_y, scale_z Scale objects axis","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/translate_face_names_from_flips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate face names using stored flip information — translate_face_names_from_flips","text":"Character vector translated face names Character vector translated face names","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/validate_position_stat.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate stat compatibility with position_on_face — validate_position_stat","title":"Validate stat compatibility with position_on_face — validate_position_stat","text":"function walks parent frames find layer's stat checks compatible position_on_face. stats scale training conflicts cause incorrect rendering used position_on_face.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/validate_position_stat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate stat compatibility with position_on_face — validate_position_stat","text":"","code":"validate_position_stat()"},{"path":"https://matthewkling.github.io/ggcube/reference/validate_position_stat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate stat compatibility with position_on_face — validate_position_stat","text":"NULL compatible, otherwise issues warning","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/zlim.html","id":null,"dir":"Reference","previous_headings":"","what":"Set z-axis limits — zlim","title":"Set z-axis limits — zlim","text":"shorthand scale_z_continuous(limits = c(min, max)). convenient way set z-axis limits without specifying scale parameters.","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/zlim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set z-axis limits — zlim","text":"","code":"zlim(min, max, ...)"},{"path":"https://matthewkling.github.io/ggcube/reference/zlim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set z-axis limits — zlim","text":"min, max minimum maximum values z-axis. ... Additional arguments passed scale_z_continuous().","code":""},{"path":"https://matthewkling.github.io/ggcube/reference/zlim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set z-axis limits — zlim","text":"ggplot2 scale object z aesthetic specified limits.","code":""},{"path":[]},{"path":"https://matthewkling.github.io/ggcube/reference/zlim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set z-axis limits — zlim","text":"","code":"library(ggplot2)  # Set z-axis limits ggplot(mtcars, aes(mpg, wt, z = qsec)) +   geom_point() +   zlim(15, 20) +   coord_3d()   # Equivalent to: ggplot(mtcars, aes(mpg, wt, z = qsec)) +   geom_point() +   scale_z_continuous(limits = c(15, 20)) +   coord_3d()"}]
